{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Java\u9762\u8bd5\u603b\u7ed3","text":""},{"location":"queue/queue/","title":"\u961f\u5217<code>Queue</code>","text":""},{"location":"queue/queue/#_1","title":"\u7279\u6027","text":"<ul> <li>\u5148\u5165\u5148\u51fa</li> <li>\u7ebf\u6027</li> <li>\u961f\u9996\uff1a\u961f\u5217\u5934\u90e8</li> <li>\u961f\u5c3e\uff1a\u961f\u5217\u5c3e\u90e8</li> <li>\u5165\u961f\uff1a\u52a0\u5165\u961f\u5c3e</li> <li>\u51fa\u961f\uff1a\u5220\u9664\u961f\u9996</li> </ul>"},{"location":"queue/queue/#java","title":"<code>Java</code>\u7528\u6cd5","text":"<pre><code>Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();\nqueue.offer(1);//\u5165\u961f\nint peek = queue.peek();//\u8bbf\u95ee\u961f\u9996\u5143\u7d20\nint pop = queue.pop();//\u51fa\u961f\nint size = queue.size();//\u83b7\u53d6\u961f\u5217\u7684\u957f\u5ea6\nboolean isEmpty = queue.isEmpty();//\u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\n</code></pre>"},{"location":"stack/stack/","title":"\u6808 <code>Stack</code>","text":""},{"location":"stack/stack/#_1","title":"\u601d\u7ef4\u5bfc\u56fe","text":""},{"location":"stack/stack/#_2","title":"\u7279\u6027","text":"<ul> <li>\u5148\u5165\u540e\u51fa</li> <li>\u7ebf\u6027</li> <li>\u7c7b\u6bd4\u4e0e\u684c\u5b50\u4e0a\u7684\u90ae\u4ef6\uff0c\u65b0\u90ae\u4ef6\u653e\u5728\u6700\u4e0a\u9762</li> <li>\u4e00\u645e\u5143\u7d20\u7684\u9876\u90e8\u4fd7\u79f0\u6808\u9876</li> <li>\u5165\u6808\uff1a\u5143\u7d20\u6dfb\u52a0\u5230\u6808\u9876</li> <li>\u51fa\u6808\uff1a\u5220\u9664\u6808\u9876\u5143\u7d20</li> </ul>"},{"location":"stack/stack/#java","title":"<code>Java</code>\u7528\u6cd5","text":"<pre><code>Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();\nstack.push(1);//\u5165\u6808\nint pop = stack.pop();//\u51fa\u6808\nint peek = stack.peek();//\u8bbf\u95ee\u6808\u9876\u5143\u7d20\uff0c\u4e0d\u5220\u9664\u6808\u9876\u5143\u7d20\n</code></pre>"},{"location":"stack/stack/#_3","title":"\u5b9e\u73b0\u65b9\u5f0f","text":"<p>1. \u94fe\u8868</p> <p>\u4f7f\u7528\u5355\u94fe\u8868\uff0c\u94fe\u8868\u9876\u7aef\u63d2\u5165\u5b9e\u73b0push\uff0c \u5220\u9664\u9876\u7aef\u5b9e\u73b0pop\uff0c\u8bbf\u95ee\u9876\u7aef\u5b9e\u73b0peek\u3002</p> <pre><code>public class Stack&lt;Item&gt; {\n\nprivate Node first;\n\nprivate int N;\n\nprivate class Node {\nItem item;\nNode next;\n}\n\npublic boolean isEmpty(){return first == null;}\n\npublic int size(){return N;}\n\npublic void push(Item item){\nNode oldFirst = first;\nfirst = new Node();\nfirst.item = item;\nfirst.next = oldFirst;\nN++;\n}\n\npublic Item pop(){\nItem item = first.item;\nfirst = first.next;\nN--;\n}\n}\n</code></pre> <p>2. \u6570\u7ec4</p> <p>\u4f7f\u7528\u6570\u7ec4\uff0c\u5c3e\u90e8\u63d2\u5165\u5143\u7d20\u5b9e\u73b0push\uff0c\u5c3e\u90e8\u5220\u9664\u5143\u7d20\u5b9e\u73b0pop</p> <pre><code>public class Stack&lt;Item&gt; {\n\nprivate ArrayList&lt;Item&gt; list;\n\npublic boolean isEmpty(){return list.size()==0;}\n\npublic int size(){return list.size();}\n\npublic void push(Item item){\nlist.add(item);\n}\n\npublic Item pop(){\nreturn list.remove(list.size()-1);\n}\n}\n</code></pre>"},{"location":"stack/stack/#_4","title":"\u5b9e\u9645\u5e94\u7528","text":"<p>\u5e73\u8861\u7b26\u53f7</p> <p>\u7f16\u8bd1\u5668\u68c0\u67e5\u82b1\u62ec\u53f7\u3001\u65b9\u62ec\u53f7\u3001\u5706\u62ec\u53f7\u7b49\u662f\u5426\u6210\u5bf9\u51fa\u73b0\uff0c\u53ef\u4ee5\u4f7f\u7528\u6808\u6765\u5b9e\u73b0\u3002\u505a\u4e00\u4e2a\u7a7a\u6808\u3002\u8bfb\u5165\u5b57\u7b26\u76f4\u5230\u6587\u4ef6\u672b\u5c3e\u3002a.\u9047\u5230\u8d77\u59cb\u62ec\u53f7\uff0c\u5219\u63a8\u5165\u6808\uff1bb.\u9047\u5230\u7ed3\u5c3e\u62ec\u53f7\uff0c\u5982\u679c\u6808\u4e3a\u7a7a\u5219\u62a5\u9519\u3002\u5426\u5219\uff0c\u5c06\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u5982\u679c\u5f39\u51fa\u7684\u5143\u7d20\u4e0d\u662f\u5bf9\u5e94\u7684\u8d77\u59cb\u62ec\u53f7\uff0c\u5219\u62a5\u9519\u3002\u5982\u679c\u8bfb\u5230\u6587\u4ef6\u672b\u5c3e\u65f6\uff0c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u4e5f\u62a5\u9519\u3002</p> <p>\u65b9\u6cd5\u8c03\u7528</p> <p>\u6bcf\u5f53\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u5728\u6808\u9876\u6dfb\u52a0\u4e00\u4e2a\u6808\u5e27\uff0c\u7528\u6765\u8bb0\u5f55\u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u5728\u9012\u5f52\u51fd\u6570\u4e2d\uff0c\u5411\u4e0b\u9012\u63a8\u4f1a\u4e0d\u65ad\u6267\u884c\u5165\u6808\uff0c\u5411\u4e0a\u56de\u6eaf\u9636\u6bb5\u65f6\u51fa\u6808\u3002</p> <p>\u6d4f\u89c8\u5668\u524d\u8fdb\u540e\u9000, \u8f6f\u4ef6\u4e2d\u7684\u64a4\u9500\u4e0e\u53cd\u64a4\u9500</p> <p>\u6bcf\u5f53\u6211\u4eec\u6253\u5f00\u65b0\u7684\u7f51\u9875\uff0c\u6d4f\u89c8\u5668\u5c31\u5c06\u4e0a\u4e00\u4e2a\u7f51\u9875\u6267\u884c\u5165\u6808\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u300c\u540e\u9000\u300d\u64cd\u4f5c\u6765\u56de\u5230\u4e0a\u4e00\u9875\u9762\uff0c\u540e\u9000\u64cd\u4f5c\u5b9e\u9645\u4e0a\u662f\u5728\u6267\u884c\u51fa\u6808\u3002\u5982\u679c\u8981\u540c\u65f6\u652f\u6301\u540e\u9000\u548c\u524d\u8fdb\uff0c\u90a3\u4e48\u5219\u9700\u8981\u4e24\u4e2a\u6808\u6765\u914d\u5408\u5b9e\u73b0\u3002</p>"},{"location":"stack/stack/#leetcode","title":"<code>leetcode</code>","text":""},{"location":"stack/stack/#_5","title":"\u6709\u6548\u7684\u62ec\u53f7","text":"<p>20. \u6709\u6548\u7684\u62ec\u53f7</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec '('\uff0c')'\uff0c'{'\uff0c'}'\uff0c'['\uff0c']'\u00a0\u7684\u5b57\u7b26\u4e32 s \uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002</p> <p>\u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a</p> <ol> <li> <p>\u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002</p> </li> <li> <p>\u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002</p> </li> <li> <p>\u6bcf\u4e2a\u53f3\u62ec\u53f7\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u76f8\u540c\u7c7b\u578b\u7684\u5de6\u62ec\u53f7\u3002 <pre><code>class Solution {\npublic boolean isValid(String s) {\nStack&lt;Character&gt; stack = new Stack&lt;&gt;();\nMap&lt;Character, Character&gt; dict = new HashMap&lt;&gt;();\n\ndict.put(')','(');\ndict.put(']','[');\ndict.put('}','{');\n\nfor(char c: s.toCharArray()){\n\nif(c == '(' || c == '[' || c == '{'){\nstack.push(c);\n}else {\nif(stack.isEmpty())return false;\n\nif(stack.pop() != dict.get(c))return false;\n}\n}\nreturn stack.isEmpty();\n}\n}\n</code></pre> <code>ASCII\u7801\u8868</code>\u4e2d\u8d77\u59cb\u62ec\u53f7\u4e0e\u7ed3\u5c3e\u62ec\u53f7\u76f8\u5dee1\u6216\u80052\uff0c\u6240\u4ee5\u4ee5\u4e0a\u4ee3\u7801\u8fd8\u53ef\u4ee5\u4f18\u5316 <pre><code>class Solution {\npublic boolean isValid(String s) {\nStack&lt;Character&gt; stack = new Stack&lt;&gt;();\n\nfor(char c: s.toCharArray()){\n\nif(c == '(' || c == '[' || c == '{'){\nstack.push(c);\n}else {\nif(stack.isEmpty())return false;\nint pop = stack.pop();\nif(pop != c-1 &amp;&amp; pop != c-2)return false;\n}\n}\nreturn stack.isEmpty();\n}\n}\n</code></pre></p> </li> </ol>"},{"location":"stack/stack/#_6","title":"\u56de\u6587\u94fe\u8868","text":"<p>234. \u56de\u6587\u94fe\u8868</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 head \uff0c\u8bf7\u4f60\u5224\u65ad\u8be5\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002\u5982\u679c\u662f\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 <pre><code>/**\n* Definition for singly-linked list.\n* public class ListNode {\n    *     int val;\n    *     ListNode next;\n    *     ListNode() {}\n    *     ListNode(int val) { this.val = val; }\n    *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n    * }\n    */\nclass Solution {\npublic boolean isPalindrome(ListNode head) {\nStack&lt;Integer&gt; stack = new Stack&lt;&gt;();\nListNode temp = head;\nwhile(temp!=null){\nstack.push(temp.val);\ntemp = temp.next;\n}\n\nwhile(!stack.isEmpty()){\n\nif(head.val!=stack.pop())return false;\nhead = head.next;\n}\n\nreturn true;\n}\n}\n</code></pre> \u8fd9\u91cc\u76f8\u5f53\u4e8e\u94fe\u8868\u4ece\u524d\u5f80\u540e\u5168\u90e8\u90fd\u6bd4\u8f83\u4e86\u4e00\u904d\uff0c\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u62ff\u94fe\u8868\u7684\u540e\u534a\u90e8\u5206\u548c\u524d\u534a\u90e8\u5206\u6bd4\u8f83\u5373\u53ef\uff0c\u6ca1\u5fc5\u8981\u5168\u90e8\u6bd4\u8f83\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b <pre><code>/**\n* Definition for singly-linked list.\n* public class ListNode {\n    *     int val;\n    *     ListNode next;\n    *     ListNode() {}\n    *     ListNode(int val) { this.val = val; }\n    *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n    * }\n    */\nclass Solution {\npublic boolean isPalindrome(ListNode head) {\nStack&lt;Integer&gt; stack = new Stack&lt;&gt;();\nListNode temp = head;\nint length = 0;\nwhile(temp!=null){\nstack.push(temp.val);\ntemp = temp.next;\nlength++;\n}\nlength/=2;\nwhile(length-- &gt; 0){\n\nif(head.val!=stack.pop())return false;\nhead = head.next;\n}\n\nreturn true;\n}\n}\n</code></pre></p>"},{"location":"stack/stack/#_7","title":"\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386","text":"<p>94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8fd4\u56de \u5b83\u7684 \u4e2d\u5e8f \u904d\u5386 \u3002 <pre><code>/**\n* Definition for a binary tree node.\n* public class TreeNode {\n    *     int val;\n    *     TreeNode left;\n    *     TreeNode right;\n    *     TreeNode() {}\n    *     TreeNode(int val) { this.val = val; }\n    *     TreeNode(int val, TreeNode left, TreeNode right) {\n    *         this.val = val;\n    *         this.left = left;\n    *         this.right = right;\n    *     }\n    * }\n    */\nclass Solution {\npublic List&lt;Integer&gt; inorderTraversal(TreeNode root) {\nList&lt;Integer&gt; res = new ArrayList&lt;&gt;();\nStack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();\nwhile(root!=null || !stack.isEmpty()){\nwhile(root!=null){\nstack.push(root);\nroot = root.left;\n}\nroot = stack.pop();\nres.add(root.val);\nroot = root.right;\n\n}\n\nreturn res;\n}\n}\n</code></pre></p>"},{"location":"stack/stack_test1/","title":"\u6808","text":"<p>2023-03-21</p> <p>61</p>"},{"location":"stack/stack_test1/#_2","title":"\u7b2c\u4e00\u6b21\u6d4b\u8bd5","text":"<p>\u7279\u6027 18 6</p> <ul> <li>\u5148\u5165\u540e\u51fa</li> <li>\u7ebf\u6027</li> </ul>"},{"location":"stack/stack_test1/#java-12-0","title":"java\u7528\u6cd5 12 0","text":"<p>\u5b9e\u73b0\u65b9\u5f0f 40</p> <p>\u94fe\u8868 20 10</p> <pre><code>public class Stack&lt;Item&gt;{\npublic Node&lt;Item&gt; first;\npublic int N;\n\npublic class Node{\npublic Item item;\npublic Node next;\n}\n\npublic boolean isEmpty(){return first == null;}\n\npublic int size(){return N;}\n\npublic void push(Item item){\nNode oldFirst = first;\n//first = new Node();\nfirst.item = item;\nfirst.next = oldFirst;\nN++;\n}\n\npublic Item pop(){\n\nItem item = first.item;\n\nfirst = first.next;\n\nN--;\n\nreturn item;\n}\n\n}\n</code></pre> <p>\u6570\u7ec4 20 20</p> <pre><code>public class Stack&lt;Item&gt;{\n\nprivate ArrayList&lt;Item&gt; list;\n\npublic boolean isEmpty(){return list.size() == 0;}\n\npublic int size(){return list.size();}\n\npublic void push(Item item){\nlist.add(item);\n}\n\npublic Item pop(){\nreturn list.remove(list.size()-1);\n}\n}\n</code></pre> <p>\u5e94\u7528 30 25</p> <ol> <li>\u5e73\u8861\u7b26\u53f7 \u7f16\u8bd1\u5668\u7f16\u8bd1\u62ec\u53f7\u7684\u5408\u6cd5\u6027\uff0c\u662f\u5426\u95ed\u73af\uff0c\u5229\u7528\u4e00\u4e2a\u6808\u6765\u5b9e\u73b0\u3002 \u8bfb\u53d6\u6587\u4ef6\u76f4\u5230\u5c3e\u90e8\uff0c\u5982\u679c\u662f\u8d77\u59cb\u62ec\u53f7\uff0c\u5219\u63a8\u5165\u6808\u4e2d\u3002\u5982\u679c\u662f\u7ed3\u5c3e\u62ec\u53f7\uff0c\u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a\u3002\u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u62a5\u9519\uff1b\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u63a8\u51fa\u6808\u9876\u5143\u7d20\u3002\u5982\u679c\u63a8\u51fa\u7684\u5143\u7d20\u4e0e\u5f53\u524d\u62ec\u53f7\u4e0d\u5339\u914d\uff0c\u5219\u62a5\u9519\u3002 \u5982\u679c\u626b\u63cf\u5230\u5c3e\u90e8\u540e\uff0c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u62a5\u9519\u3002</li> <li>\u6d4f\u89c8\u5668\u7684\u540e\u9000\u4e0e\u524d\u8fdb\uff0c\u8f6f\u4ef6\u7684\u64a4\u9500\u4e0e\u53cd\u64a4\u9500\u3002</li> <li>\u65b9\u6cd5\u8c03\u7528\uff0c\u6bcf\u5f53\u6709\u65b0\u65b9\u6cd5\u8c03\u7528\uff0c\u5219\u5c06\u51fd\u6570\u53d8\u91cf\u3001\u5730\u5740\u7b49\u63a8\u5165\u6808\u9876\uff0c\u8be5\u5f15\u7528\u4e3a\u6808\u5e27\uff0c\u65b9\u6cd5\u6267\u884c\u5b8c\u540e\uff0c\u6267\u884c\u51fa\u6808\uff0c\u5373\u6808\u5e27\u51fa\u6808\u6216\u6808\u9876\u5143\u7d20\u51fa\u6808\u3002\u51fd\u6570\u9012\u5f52</li> </ol>"}]}