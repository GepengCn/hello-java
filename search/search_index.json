{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Java\u9762\u8bd5\u603b\u7ed3","text":""},{"location":"#_1","title":"\u8d44\u6599","text":"<p>\u7b97\u6cd5\u53ef\u89c6\u5316</p> <p>https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</p> <p>AVL\u6811\u30012-3\u6811\u3001\u7ea2\u9ed1\u6811\u8be6\u89e3</p> <p>https://juejin.cn/post/7152004201952837669#heading-42</p> <p>\u7ea2\u9ed1\u6811\u5b9e\u73b0</p> <p>https://algs4.cs.princeton.edu/33balanced/RedBlackBST.java.html</p>"},{"location":"array/array/","title":"\u6570\u7ec4<code>Array</code>","text":""},{"location":"array/array/#_1","title":"\u601d\u7ef4\u5bfc\u56fe","text":""},{"location":"array/array/#_2","title":"\u7279\u6027","text":"<ul> <li><code>\u987a\u5e8f</code>\u5b58\u50a8\u591a\u4e2a<code>\u76f8\u540c\u7c7b\u578b</code>\u7684\u6570\u636e, \u5185\u5b58\u4e2d\u76f8\u8fde</li> <li>\u5143\u7d20\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u4e3a<code>\u7d22\u5f15</code></li> <li>\u6709\u7d22\u5f15\uff0c\u6240\u4ee5\u8bbf\u95ee\u975e\u5e38\u9ad8\u6548</li> <li><code>\u56fa\u5b9a\u5bb9\u91cf</code>\uff0c\u4e00\u7ecf\u521b\u5efa\uff0c\u957f\u5ea6\u4e0d\u53ef\u53d8\uff0c\u6269\u5bb9\u9700\u8981<code>\u521b\u5efa\u65b0\u6570\u7ec4</code>\uff0c\u5c06\u6570\u636e<code>\u62f7\u8d1d</code>\u8fc7\u53bb</li> <li>\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\u6548\u7387\u4f4e\uff0c\u4e3a\u4e86\u4f7f\u6570\u7ec4\u7684\u5143\u7d20\u76f8\u8fde\uff0c\u53ef\u80fd\u9700\u8981\u79fb\u52a8\u5176\u5b83\u6570\u7ec4\u5143\u7d20\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(N)\\)</li> <li><code>\u5185\u5b58\u6d6a\u8d39</code>\uff0c\u521d\u59cb\u5316\u4e00\u4e2a\u6bd4\u8f83\u957f\u7684\u6570\u7ec4\uff0c\u53ea\u7528\u524d\u9762\u90e8\u5206</li> </ul>"},{"location":"array/array/#_3","title":"\u521d\u59cb\u5316","text":"<p>\u65e0\u521d\u59cb\u503c\uff0c\u4f46\u9700\u6307\u5b9a\u957f\u5ea6</p> <pre><code>int[] arr = new int[5]; // { 0, 0, 0, 0, 0 }\n</code></pre> <p>\u6709\u521d\u59cb\u503c</p> <pre><code>int[] nums = { 1, 3, 2, 5, 4 };\n</code></pre>"},{"location":"array/array/#_4","title":"\u5e38\u7528\u64cd\u4f5c","text":"<p>\u904d\u5386</p> <pre><code>int[] nums = { 1, 3, 2, 5, 4 };\n\nfor(int i=0;i&lt;nums.length;i++){\nSystem.out.println(nums[i]);\n}\n\nfor(int num:nums){\nSystem.out.println(num);\n}\n</code></pre> <p>\u67e5\u627e</p> <pre><code>int a = nums[0];\n</code></pre> <p>\u63d2\u5165</p> <pre><code>/* \u5728\u6570\u7ec4\u7684\u7d22\u5f15 index \u5904\u63d2\u5165\u5143\u7d20 num */\nvoid insert(int[] nums, int num, int index) {\n// \u628a\u7d22\u5f15 index \u4ee5\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\nfor (int i = nums.length - 1; i &gt; index; i--) {\nnums[i] = nums[i - 1];\n}\n// \u5c06 num \u8d4b\u7ed9 index \u5904\u5143\u7d20\nnums[index] = num;\n}\n</code></pre> <p>\u5220\u9664</p> <pre><code>/* \u5220\u9664\u7d22\u5f15 index \u5904\u5143\u7d20 */\nvoid remove(int[] nums, int index) {\n// \u628a\u7d22\u5f15 index \u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\nfor (int i = index; i &lt; nums.length - 1; i++) {\nnums[i] = nums[i + 1];\n}\n}\n</code></pre>"},{"location":"array/array/#_5","title":"\u5b9e\u9645\u5e94\u7528","text":"<p>\u968f\u673a\u8bbf\u95ee</p> <p>\u5982\u679c\u6211\u4eec\u60f3\u8981\u968f\u673a\u62bd\u53d6\u4e00\u4e9b\u6837\u672c\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u6570\u7ec4\u5b58\u50a8\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u968f\u673a\u5e8f\u5217\uff0c\u6839\u636e\u7d22\u5f15\u5b9e\u73b0\u6837\u672c\u7684\u968f\u673a\u62bd\u53d6\u3002</p> <p>\u4e8c\u5206\u67e5\u627e</p> <p>\u4f8b\u5982\u67e5\u5b57\u5178\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b57\u5178\u4e2d\u7684\u6240\u6709\u5b57\u6309\u7167\u62fc\u97f3\u987a\u5e8f\u5b58\u50a8\u5728\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u4f7f\u7528\u4e0e\u65e5\u5e38\u67e5\u7eb8\u8d28\u5b57\u5178\u76f8\u540c\u7684\u201c\u7ffb\u5f00\u4e2d\u95f4\uff0c\u6392\u9664\u4e00\u534a\u201d\u7684\u65b9\u5f0f\uff0c\u6765\u5b9e\u73b0\u4e00\u4e2a\u67e5\u7535\u5b50\u5b57\u5178\u7684\u7b97\u6cd5\u3002</p> <p>\u6df1\u5ea6\u5b66\u4e60</p> <p>\u795e\u7ecf\u7f51\u7edc\u4e2d\u5927\u91cf\u4f7f\u7528\u4e86\u5411\u91cf\u3001\u77e9\u9635\u3001\u5f20\u91cf\u4e4b\u95f4\u7684\u7ebf\u6027\u4ee3\u6570\u8fd0\u7b97\uff0c\u8fd9\u4e9b\u6570\u636e\u90fd\u662f\u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u6784\u5efa\u7684\u3002\u6570\u7ec4\u662f\u795e\u7ecf\u7f51\u7edc\u7f16\u7a0b\u4e2d\u6700\u5e38\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784\u3002</p>"},{"location":"array/array/#leetcode","title":"<code>leetcode</code>","text":""},{"location":"array/array/#1","title":"1. \u4e24\u6570\u4e4b\u548c","text":"<p>1. \u4e24\u6570\u4e4b\u548c</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\u00a0\u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c target\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa \u548c\u4e3a\u76ee\u6807\u503c target\u00a0 \u7684\u90a3\u00a0\u4e24\u4e2a\u00a0\u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u5728\u7b54\u6848\u91cc\u4e0d\u80fd\u91cd\u590d\u51fa\u73b0\u3002</p> <p>\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [2,7,11,15], target = 9\n\u8f93\u51fa\uff1a[0,1]\n\u89e3\u91ca\uff1a\u56e0\u4e3a nums[0] + nums[1] == 9 \uff0c\u8fd4\u56de [0, 1] \u3002\n</code></pre> <pre><code>class Solution {\npublic int[] twoSum(int[] nums, int target) {\nfor(int i=0;i&lt;nums.length;i++){\nfor(int j=i+1;j&lt;nums.length;j++){\nif(nums[i]+nums[j]==target){\nint[] res = {i,j};\nreturn res;\n}\n}\n}\nreturn new int[0];\n}\n}\n</code></pre>"},{"location":"graph/graph/","title":"\u56fe <code>graph</code>","text":""},{"location":"graph/graph/#_1","title":"\u7279\u6027","text":"<ul> <li>\u975e\u7ebf\u6027\u6570\u636e\u7ed3\u6784</li> <li>\u7531\u9876\u70b9<code>vertex</code>\u548c\u8fb9<code>edge</code>\u7ec4\u6210</li> <li>\u53ef\u62bd\u8c61\u7684\u8868\u793a\u4e3a\u4e00\u7ec4\u9876\u70b9\\(V\\)\u548c\u4e00\u7ec4\u8fb9\\(E\\)\u7684\u96c6\u5408</li> <li>\u90bb\u63a5\uff1a\u5f53\u4e24\u9876\u70b9\u4e4b\u95f4\u6709\u8fb9\u76f8\u8fde\u65f6\uff0c\u79f0\u6b64\u4e24\u9876\u70b9\u90bb\u63a5</li> <li>\u8def\u5f84\uff1a\u4ece\u9876\u70b9<code>A</code>\u5230\u9876\u70b9<code>B</code>\u8d70\u8fc7\u7684\u8fb9\u6784\u6210\u7684\u5e8f\u5217\uff0c\u88ab\u79f0\u4e3a\u4ece<code>A</code>\u5230<code>B</code>\u7684\u201c\u8def\u5f84\u201d</li> <li>\u5ea6\uff1a\u8868\u793a\u4e00\u4e2a\u9876\u70b9\u5177\u6709\u591a\u5c11\u6761\u8fb9\u3002</li> </ul> <p>\u6bd4\u8f83\u94fe\u8868\u4e0e\u6811</p> <p>\\(V={1,2,3,4,5}\\)</p> <p>\\(E=\\{(1,2),(1,3),(1,4),(2,3),(2,4),(2,5),(4,5)\\}\\)</p> <p>\\(G = {V,E}\\)</p> <p></p>"},{"location":"graph/graph/#_2","title":"\u56fe\u7684\u8868\u73b0\u5f62\u5f0f","text":"<p>\u65e0\u5411\u56fe</p> <p> </p> <p>\u90bb\u63a5\u94fe\u8868</p> <p> </p> <p>\u90bb\u63a5\u77e9\u9635</p> <p> </p>"},{"location":"graph/graph/#_3","title":"\u5e38\u89c1\u5e94\u7528","text":"\u5e94\u7528 \u9876\u70b9 \u8fb9 \u56fe\u8ba1\u7b97\u89e3\u51b3\u95ee\u9898 \u793e\u4ea4\u7f51\u7edc \u7528\u6237 \u597d\u53cb\u5173\u7cfb \u6f5c\u5728\u597d\u53cb\u63a8\u8350 \u5730\u94c1\u7ebf\u8def \u7ad9\u70b9 \u7ad9\u70b9\u95f4\u7684\u8fde\u901a\u6027 \u6700\u77ed\u8def\u7ebf\u63a8\u8350 \u592a\u9633\u7cfb \u661f\u4f53 \u661f\u4f53\u95f4\u7684\u4e07\u6709\u5f15\u529b\u4f5c\u7528 \u884c\u661f\u8f68\u9053\u8ba1\u7b97"},{"location":"heap/heap/","title":"\u5806<code>heap</code>","text":""},{"location":"heap/heap/#_1","title":"\u601d\u7ef4\u5bfc\u56fe","text":""},{"location":"heap/heap/#_2","title":"\u5b9a\u4e49","text":"<p>\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b\uff0c\u6700\u5927\u5806\uff08\u5927\u9876\u5806\uff09\u548c\u6700\u5c0f\u5806\uff08\u5c0f\u9876\u5806\uff09\uff1a</p> <ol> <li>\u6700\u5927\u5806\uff1a\u4efb\u610f\u7ed3\u70b9\\(&gt;=\\)\u5176\u5b50\u7ed3\u70b9</li> <li>\u6700\u5c0f\u5806\uff1a\u4efb\u610f\u7ed3\u70b9\\(&lt;=\\)\u5176\u5b50\u7ed3\u70b9</li> </ol>"},{"location":"heap/heap/#_3","title":"\u7279\u6027","text":"<ul> <li>\u5b8c\u5168\u4e8c\u53c9\u6811</li> <li>\u9664\u4e86\u53f6\u8282\u70b9\uff0c\u8be5\u6811\u662f\u5b8c\u5168\u5145\u6ee1\u7684\uff0c\u800c\u4e14\u662f\u4ece\u5de6\u5411\u53f3\u586b\u5145</li> <li>\u6700\u5927\u5806\uff0c\u5806\u9876\u4e3a\u5176\u6700\u5927\u503c</li> <li>\u6700\u5c0f\u5806\uff0c\u5806\u9876\u4e3a\u5176\u6700\u5c0f\u503c</li> <li>\u5305\u542b\\(n\\)\u4e2a\u5143\u7d20\u7684\u5806\u7684\u9ad8\u5ea6\u4e3a\\(\\lg n\\)</li> <li>\u5806\u7ed3\u6784\u4e0a\u7684\u57fa\u672c\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(\\lg n)\\)</li> </ul>"},{"location":"heap/heap/#java","title":"<code>Java</code>\u5b9e\u73b0","text":"<p><code>Java</code>\u4e2d\u5b9e\u73b0\u7684\u65b9\u5f0f\u4e3a\u4f18\u5148\u961f\u5217\uff0c\u901a\u8fc7\u5bf9\u5143\u7d20\u6392\u5e8f\u65b9\u5f0f\u7684\u91cd\u5199\uff0c\u53ef\u4ee5\u5206\u522b\u5b9e\u73b0\u6700\u5927\u5806\u548c\u6700\u5c0f\u5806\uff0c\u9ed8\u8ba4\u4e3a\u6700\u5c0f\u5806\u3002</p> <pre><code>/* \u521d\u59cb\u5316\u5806 */\n// \u521d\u59cb\u5316\u5c0f\u9876\u5806\nQueue&lt;Integer&gt; minHeap = new PriorityQueue&lt;&gt;();\n// \u521d\u59cb\u5316\u5927\u9876\u5806\uff08\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u4fee\u6539 Comparator \u5373\u53ef\uff09\nQueue&lt;Integer&gt; maxHeap = new PriorityQueue&lt;&gt;((a, b) -&gt; b - a);\n\n/* \u5143\u7d20\u5165\u5806 */\nmaxHeap.offer(1);\nmaxHeap.offer(3);\nmaxHeap.offer(2);\nmaxHeap.offer(5);\nmaxHeap.offer(4);\n\n/* \u83b7\u53d6\u5806\u9876\u5143\u7d20 */\nint peek = maxHeap.peek(); // 5\n\n/* \u5806\u9876\u5143\u7d20\u51fa\u5806 */\n// \u51fa\u5806\u5143\u7d20\u4f1a\u5f62\u6210\u4e00\u4e2a\u4ece\u5927\u5230\u5c0f\u7684\u5e8f\u5217\npeek = heap.poll();  // 5\npeek = heap.poll();  // 4\npeek = heap.poll();  // 3\npeek = heap.poll();  // 2\npeek = heap.poll();  // 1\n\n/* \u83b7\u53d6\u5806\u5927\u5c0f */\nint size = maxHeap.size();\n\n/* \u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a */\nboolean isEmpty = maxHeap.isEmpty();\n\n/* \u8f93\u5165\u5217\u8868\u5e76\u5efa\u5806 */\nminHeap = new PriorityQueue&lt;&gt;(Arrays.asList(1, 3, 2, 5, 4));\n</code></pre>"},{"location":"heap/heap/#_4","title":"\u5806\u7684\u5b9e\u73b0","text":"<p>\u5806\u662f\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u9002\u5408\u7528\u6570\u7ec4\u6765\u8868\u793a</p> <ul> <li>\u7ed9\u5b9a\u7d22\u5f15\uff1a\\(i\\)</li> <li>\u5de6\u5b50\u7ed3\u70b9\uff1a\\(2i+1\\)</li> <li>\u53f3\u5b50\u7ed3\u70b9\uff1a\\(2i+2\\)</li> <li>\u7236\u7ed3\u70b9\uff1a\\((i-1)/2\\)</li> </ul> <p></p>"},{"location":"heap/heap/#_5","title":"\u5e38\u7528\u64cd\u4f5c","text":""},{"location":"heap/heap/#1","title":"1. \u5143\u7d20\u5165\u5806","text":"<p>\u5143\u7d20\u5165\u5806</p> <p>\u7ed9\u5b9a\u5143\u7d20 val \uff0c\u6211\u4eec\u5148\u5c06\u5176\u6dfb\u52a0\u5230\u5806\u5e95\u3002\u6dfb\u52a0\u540e\uff0c\u7531\u4e8e val \u53ef\u80fd\u5927\u4e8e\u5806\u4e2d\u5176\u5b83\u5143\u7d20\uff0c\u6b64\u65f6\u5806\u7684\u6210\u7acb\u6761\u4ef6\u53ef\u80fd\u5df2\u7ecf\u88ab\u7834\u574f\uff0c\u56e0\u6b64\u9700\u8981\u4fee\u590d\u4ece\u63d2\u5165\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u5404\u4e2a\u7ed3\u70b9\uff0c\u8be5\u64cd\u4f5c\u88ab\u79f0\u4e3a\u300c\u5806\u5316 Heapify\u300d\u3002</p> <p>\u8003\u8651\u4ece\u5165\u5806\u7ed3\u70b9\u5f00\u59cb\uff0c\u4ece\u5e95\u81f3\u9876\u6267\u884c\u5806\u5316\u3002\u5177\u4f53\u5730\uff0c\u6bd4\u8f83\u63d2\u5165\u7ed3\u70b9\u4e0e\u5176\u7236\u7ed3\u70b9\u7684\u503c\uff0c\u82e5\u63d2\u5165\u7ed3\u70b9\u66f4\u5927\u5219\u5c06\u5b83\u4eec\u4ea4\u6362\uff1b\u5e76\u5faa\u73af\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u4ece\u5e95\u81f3\u9876\u5730\u4fee\u590d\u5806\u4e2d\u7684\u5404\u4e2a\u7ed3\u70b9\uff1b\u76f4\u81f3\u8d8a\u8fc7\u6839\u7ed3\u70b9\u65f6\u7ed3\u675f\uff0c\u6216\u5f53\u9047\u5230\u65e0\u9700\u4ea4\u6362\u7684\u7ed3\u70b9\u65f6\u63d0\u524d\u7ed3\u675f\u3002</p> 1.11.21.31.4 <p></p> <p></p> <p></p> <p></p> <pre><code>/* \u5143\u7d20\u5165\u5806 */\nvoid push(int val) {\n// \u6dfb\u52a0\u7ed3\u70b9\nmaxHeap.add(val);\n// \u4ece\u5e95\u81f3\u9876\u5806\u5316\nsiftUp(size() - 1);\n}\n\n/* \u4ece\u7ed3\u70b9 i \u5f00\u59cb\uff0c\u4ece\u5e95\u81f3\u9876\u5806\u5316 */\nvoid siftUp(int i) {\nwhile (true) {\n// \u83b7\u53d6\u7ed3\u70b9 i \u7684\u7236\u7ed3\u70b9\nint p = parent(i);\n// \u5f53\u201c\u8d8a\u8fc7\u6839\u7ed3\u70b9\u201d\u6216\u201c\u7ed3\u70b9\u65e0\u9700\u4fee\u590d\u201d\u65f6\uff0c\u7ed3\u675f\u5806\u5316\nif (p &lt; 0 || maxHeap.get(i) &lt;= maxHeap.get(p))\nbreak;\n// \u4ea4\u6362\u4e24\u7ed3\u70b9\nswap(i, p);\n// \u5faa\u73af\u5411\u4e0a\u5806\u5316\ni = p;\n}\n}\n</code></pre>"},{"location":"heap/heap/#2","title":"2. \u5143\u7d20\u51fa\u5806","text":"<p>\u5143\u7d20\u51fa\u5806</p> <p>\u5806\u9876\u5143\u7d20\u662f\u4e8c\u53c9\u6811\u6839\u7ed3\u70b9\uff0c\u5373\u5217\u8868\u9996\u5143\u7d20\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5c06\u9996\u5143\u7d20\u4ece\u5217\u8868\u4e2d\u5220\u9664\uff0c\u5219\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u7ed3\u70b9\u90fd\u4f1a\u968f\u4e4b\u53d1\u751f\u79fb\u4f4d\uff08\u7d22\u5f15\u53d1\u751f\u53d8\u5316\uff09\uff0c\u8fd9\u6837\u540e\u7eed\u4f7f\u7528\u5806\u5316\u4fee\u590d\u5c31\u5f88\u9ebb\u70e6\u4e86\u3002\u4e3a\u4e86\u5c3d\u91cf\u51cf\u5c11\u5143\u7d20\u7d22\u5f15\u53d8\u52a8\uff0c\u91c7\u53d6\u4ee5\u4e0b\u64cd\u4f5c\u6b65\u9aa4\uff1a</p> <ul> <li>\u4ea4\u6362\u5806\u9876\u5143\u7d20\u4e0e\u5806\u5e95\u5143\u7d20\uff08\u5373\u4ea4\u6362\u6839\u7ed3\u70b9\u4e0e\u6700\u53f3\u53f6\u7ed3\u70b9\uff09\uff1b</li> <li>\u4ea4\u6362\u5b8c\u6210\u540e\uff0c\u5c06\u5806\u5e95\u4ece\u5217\u8868\u4e2d\u5220\u9664\uff08\u6ce8\u610f\uff0c\u56e0\u4e3a\u5df2\u7ecf\u4ea4\u6362\uff0c\u5b9e\u9645\u4e0a\u5220\u9664\u7684\u662f\u539f\u6765\u7684\u5806\u9876\u5143\u7d20\uff09\uff1b</li> <li>\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\uff0c\u4ece\u9876\u81f3\u5e95\u6267\u884c\u5806\u5316\uff1b</li> </ul> <p>\u987e\u540d\u601d\u4e49\uff0c\u4ece\u9876\u81f3\u5e95\u5806\u5316\u7684\u64cd\u4f5c\u65b9\u5411\u4e0e\u4ece\u5e95\u81f3\u9876\u5806\u5316\u76f8\u53cd\uff0c\u6211\u4eec\u6bd4\u8f83\u6839\u7ed3\u70b9\u7684\u503c\u4e0e\u5176\u4e24\u4e2a\u5b50\u7ed3\u70b9\u7684\u503c\uff0c\u5c06\u6700\u5927\u7684\u5b50\u7ed3\u70b9\u4e0e\u6839\u7ed3\u70b9\u6267\u884c\u4ea4\u6362\uff0c\u5e76\u5faa\u73af\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u76f4\u5230\u8d8a\u8fc7\u53f6\u7ed3\u70b9\u65f6\u7ed3\u675f\uff0c\u6216\u5f53\u9047\u5230\u65e0\u9700\u4ea4\u6362\u7684\u7ed3\u70b9\u65f6\u63d0\u524d\u7ed3\u675f\u3002</p> 2.12.22.32.42.52.62.72.82.92.10 <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <pre><code>/* \u5143\u7d20\u51fa\u5806 */\nint pop() {\n// \u5224\u7a7a\u5904\u7406\nif (isEmpty())\nthrow new EmptyStackException();\n// \u4ea4\u6362\u6839\u7ed3\u70b9\u4e0e\u6700\u53f3\u53f6\u7ed3\u70b9\uff08\u5373\u4ea4\u6362\u9996\u5143\u7d20\u4e0e\u5c3e\u5143\u7d20\uff09\nswap(0, size() - 1);\n// \u5220\u9664\u7ed3\u70b9\nint val = maxHeap.remove(size() - 1);\n// \u4ece\u9876\u81f3\u5e95\u5806\u5316\nsiftDown(0);\n// \u8fd4\u56de\u5806\u9876\u5143\u7d20\nreturn val;\n}\n\n/* \u4ece\u7ed3\u70b9 i \u5f00\u59cb\uff0c\u4ece\u9876\u81f3\u5e95\u5806\u5316 */\nvoid siftDown(int i) {\nwhile (true) {\n// \u5224\u65ad\u7ed3\u70b9 i, l, r \u4e2d\u503c\u6700\u5927\u7684\u7ed3\u70b9\uff0c\u8bb0\u4e3a ma\nint l = left(i), r = right(i), ma = i;\nif (l &lt; size() &amp;&amp; maxHeap.get(l) &gt; maxHeap.get(ma))\nma = l;\nif (r &lt; size() &amp;&amp; maxHeap.get(r) &gt; maxHeap.get(ma))\nma = r;\n// \u82e5\u7ed3\u70b9 i \u6700\u5927\u6216\u7d22\u5f15 l, r \u8d8a\u754c\uff0c\u5219\u65e0\u9700\u7ee7\u7eed\u5806\u5316\uff0c\u8df3\u51fa\nif (ma == i) break;\n// \u4ea4\u6362\u4e24\u7ed3\u70b9\nswap(i, ma);\n// \u5faa\u73af\u5411\u4e0b\u5806\u5316\ni = ma;\n}\n}\n</code></pre>"},{"location":"heap/heap/#_6","title":"\u5e38\u89c1\u5e94\u7528","text":"<p>\u4f18\u5148\u961f\u5217</p> <p>\u5806\u5e38\u4f5c\u4e3a\u5b9e\u73b0\u4f18\u5148\u961f\u5217\u7684\u9996\u9009\u6570\u636e\u7ed3\u6784\uff0c\u5165\u961f\u548c\u51fa\u961f\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(\\lg n)\\)\uff0c\u5efa\u961f\u64cd\u4f5c\u4e3a\\(O(n)\\)\uff0c\u7686\u975e\u5e38\u9ad8\u6548\u3002</p> <p>\u5806\u6392\u5e8f</p> <p>\u7ed9\u5b9a\u4e00\u7ec4\u6570\u636e\uff0c\u6211\u4eec\u4f7f\u7528\u5176\u5efa\u5806\uff0c\u5e76\u4f9d\u6b21\u5168\u90e8\u5f39\u51fa\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\u6709\u5e8f\u7684\u5e8f\u5217\u3002\u5f53\u7136\uff0c\u5806\u6392\u5e8f\u4e00\u822c\u65e0\u9700\u5f39\u51fa\u5143\u7d20\uff0c\u4ec5\u9700\u6bcf\u8f6e\u5c06\u5806\u9876\u5143\u7d20\u4ea4\u6362\u81f3\u6570\u7ec4\u5c3e\u90e8\u5e76\u51cf\u5c0f\u5806\u7684\u957f\u5ea6\u5373\u53ef\u3002</p> <p>\u83b7\u53d6\u6700\u5927\u7684\\(k\\)\u4e2a\u5143\u7d20</p> <p>\u8fd9\u65e2\u662f\u4e00\u9053\u7ecf\u5178\u7b97\u6cd5\u9898\u76ee\uff0c\u4e5f\u662f\u4e00\u79cd\u5e38\u89c1\u5e94\u7528\uff0c\u4f8b\u5982\u9009\u53d6\u70ed\u5ea6\u524d 10 \u7684\u65b0\u95fb\u4f5c\u4e3a\u5fae\u535a\u70ed\u641c\uff0c\u9009\u53d6\u524d 10 \u9500\u91cf\u7684\u5546\u54c1\u7b49\u3002</p>"},{"location":"heap/heap/#_7","title":"\u5efa\u5806","text":"<p>\u501f\u52a9\u5165\u5806\u65b9\u6cd5\u5b9e\u73b0</p> <p>\u6700\u76f4\u63a5\u5730\uff0c\u8003\u8651\u501f\u52a9\u300c\u5143\u7d20\u5165\u5806\u300d\u65b9\u6cd5\uff0c\u5148\u5efa\u7acb\u4e00\u4e2a\u7a7a\u5806\uff0c\u518d\u5c06\u5217\u8868\u5143\u7d20\u4f9d\u6b21\u5165\u5806\u5373\u53ef\u3002</p> <p>\u8bbe\u5143\u7d20\u6570\u91cf\u4e3a\\(n\\)  \uff0c\u5219\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5165\u5806\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\log n)\\) \uff0c\u5728\u4f9d\u6b21\u5165\u5806\u65f6\uff0c\u5806\u7684\u5e73\u5747\u957f\u5ea6\u4e3a\\(n/2\\)\uff0c\u56e0\u6b64\u8be5\u65b9\u6cd5\u7684\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(n \\log n)\\)\u3002</p> <p>\u57fa\u4e8e\u5806\u5316\u64cd\u4f5c\u5b9e\u73b0</p> <p>\u5148\u5c06\u5217\u8868\u6240\u6709\u5143\u7d20\u539f\u5c01\u4e0d\u52a8\u6dfb\u52a0\u8fdb\u5806\uff0c\u7136\u540e\u8fed\u4ee3\u5730\u5bf9\u5404\u4e2a\u7ed3\u70b9\u6267\u884c\u300c\u4ece\u9876\u81f3\u5e95\u5806\u5316\u300d\u3002\u5f53\u7136\uff0c\u65e0\u9700\u5bf9\u53f6\u7ed3\u70b9\u6267\u884c\u5806\u5316\uff0c\u56e0\u4e3a\u5176\u6ca1\u6709\u5b50\u7ed3\u70b9\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230\\(O(n)\\)\u3002</p>"},{"location":"heap/heap/#leetcode","title":"<code>leetcode</code>","text":""},{"location":"heap/heap/#offer-40-k","title":"\u5251\u6307 Offer 40. \u6700\u5c0f\u7684k\u4e2a\u6570","text":"<p>\u5251\u6307 Offer 40. \u6700\u5c0f\u7684k\u4e2a\u6570</p> <p>\u8f93\u5165\u6574\u6570\u6570\u7ec4 <code>arr</code> \uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684 <code>k</code> \u4e2a\u6570\u3002\u4f8b\u5982\uff0c\u8f93\u51654\u30015\u30011\u30016\u30012\u30017\u30013\u30018\u8fd98\u4e2a\u6570\u5b57\uff0c\u5219\u6700\u5c0f\u76844\u4e2a\u6570\u5b57\u662f1\u30012\u30013\u30014\u3002</p> <pre><code>// \u4fdd\u6301\u5806\u7684\u5927\u5c0f\u4e3aK\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\uff0c\u904d\u5386\u7684\u65f6\u5019\u505a\u5982\u4e0b\u5224\u65ad\uff1a\n// 1. \u82e5\u76ee\u524d\u5806\u7684\u5927\u5c0f\u5c0f\u4e8eK\uff0c\u5c06\u5f53\u524d\u6570\u5b57\u653e\u5165\u5806\u4e2d\u3002\n// 2. \u5426\u5219\u5224\u65ad\u5f53\u524d\u6570\u5b57\u4e0e\u5927\u6839\u5806\u5806\u9876\u5143\u7d20\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5982\u679c\u5f53\u524d\u6570\u5b57\u6bd4\u5927\u6839\u5806\u5806\u9876\u8fd8\u5927\uff0c\u8fd9\u4e2a\u6570\u5c31\u76f4\u63a5\u8df3\u8fc7\uff1b\n//    \u53cd\u4e4b\u5982\u679c\u5f53\u524d\u6570\u5b57\u6bd4\u5927\u6839\u5806\u5806\u9876\u5c0f\uff0c\u5148poll\u6389\u5806\u9876\uff0c\u518d\u5c06\u8be5\u6570\u5b57\u653e\u5165\u5806\u4e2d\u3002\nclass Solution {\npublic int[] getLeastNumbers(int[] arr, int k) {\nif (k == 0 || arr.length == 0) {\nreturn new int[0];\n}\n// \u9ed8\u8ba4\u662f\u5c0f\u6839\u5806\uff0c\u5b9e\u73b0\u5927\u6839\u5806\u9700\u8981\u91cd\u5199\u4e00\u4e0b\u6bd4\u8f83\u5668\u3002\nQueue&lt;Integer&gt; pq = new PriorityQueue&lt;&gt;((v1, v2) -&gt; v2 - v1);\nfor (int num: arr) {\nif (pq.size() &lt; k) {\npq.offer(num);\n} else if (num &lt; pq.peek()) {\npq.poll();\npq.offer(num);\n}\n}\n\n// \u8fd4\u56de\u5806\u4e2d\u7684\u5143\u7d20\nint[] res = new int[pq.size()];\nint idx = 0;\nfor(int num: pq) {\nres[idx++] = num;\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"linkedlist/linkedlist/","title":"\u94fe\u8868<code>linkedlist</code>","text":""},{"location":"linkedlist/linkedlist/#_1","title":"\u601d\u7ef4\u5bfc\u56fe","text":""},{"location":"linkedlist/linkedlist/#_2","title":"\u7279\u6027","text":"<ul> <li>\u8868\u793a\u4e00\u5217\u5143\u7d20</li> <li>\u9012\u5f52\u7684\u6570\u636e\u7ed3\u6784</li> <li>\u7ebf\u6027</li> <li>\u5185\u5b58\u975e\u8fde\u7eed\u7684</li> <li>\u6bcf\u4e2a\u8282\u70b9\u542b\u6709\u4e00\u4e2a\u6cdb\u578b\u7684\u5143\u7d20\u548c\u4e00\u4e2a\u6307\u5411\u53e6\u4e00\u6761\u94fe\u8868\u7684\u5f15\u7528</li> <li>\u63d2\u5165\u548c\u5220\u9664\u6548\u7387\u5f88\u9ad8\uff0c\u53ea\u9700\u8981\u6539\u53d8\u8282\u70b9\u7684\u6307\u5411</li> <li>\u67e5\u8be2\u6548\u7387\u4f4e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(N)\\)</li> <li>\u4e0e\u6570\u7ec4\u76f8\u6bd4\uff0c\u5185\u5b58\u5360\u7528\u9ad8\uff0c\u56e0\u4e3a\u9700\u8981\u4fdd\u5b58\u6307\u9488</li> </ul>"},{"location":"linkedlist/linkedlist/#_3","title":"\u6784\u9020\u94fe\u8868","text":"<pre><code>public class ListNode{\nint val;\nListNode next;\n}\n</code></pre> <p>\u521d\u59cb\u5316\u65b9\u6cd5</p> <ol> <li>\u521d\u59cb\u5316\u5404\u4e2a\u8282\u70b9\u5bf9\u8c61</li> <li>\u6784\u5efa\u8282\u70b9\u7684\u6307\u5411\u5173\u7cfb</li> </ol>"},{"location":"linkedlist/linkedlist/#_4","title":"\u521d\u59cb\u5316","text":"<p>\u6784\u9020\u5668\u521d\u59cb\u5316</p> <pre><code>ListNode node = new ListNode(1);//\u6784\u9020\u5668\u521d\u59cb\u5316\n</code></pre> <p>\u521b\u5efa\u5bf9\u8c61\u540e\u521d\u59cb\u5316</p> <pre><code>ListNode node1 = new ListNode();\nnode1.val = 2;\n</code></pre>"},{"location":"linkedlist/linkedlist/#_5","title":"\u5e38\u7528\u64cd\u4f5c","text":"<p>\u904d\u5386</p> <pre><code>ListNode head = initNode();\nwhile(head!=null){\nSystem.out.println(head.val);\nhead = head.next;\n}\n</code></pre> <p>\u67e5\u627e</p> <pre><code>public ListNode find(ListNode head, int target){\nwhile(head!=null){\nif(head.val == target)return head;\nhead = head.next;\n}\nreturn null;\n}\n</code></pre> <p>\u63d2\u5165</p> <pre><code>public void insert(ListNode head, int newValue){\nListNode newNode = new ListNode(newValue);\nhead.next = newNode;\n}\n</code></pre> <p>\u5220\u9664</p> <pre><code>public void delete(ListNode head, int target){\nListNode pre = null;\nwhile(head!=null){\nif(target == head.val){\nif(pre==null){\nhead = head.next;\n} else {\npre.next = head.next;\n}\n}else {\npre = head;\nhead = head.next;\n}\n}\n}\n</code></pre>"},{"location":"linkedlist/linkedlist/#_6","title":"\u5e38\u89c1\u7c7b\u578b","text":"<ul> <li>\u5355\u5411\u94fe\u8868\u3002\u8282\u70b9\u6307\u5411\u4e0b\u4e00\u8282\u70b9</li> <li>\u73af\u5f62\u94fe\u8868\u3002\u9996\u4f4d\u8282\u70b9\u76f8\u63a5\uff0c\u5373\u5c3e\u7ed3\u70b9\u6307\u5411\u9996\u8282\u70b9\uff0c\u5f62\u6210\u73af\u3002</li> <li>\u53cc\u5411\u94fe\u8868\u3002\u8282\u70b9\u6307\u5411\u4e0a\u4e00\u8282\u70b9\u4e0e\u4e0b\u4e00\u8282\u70b9\u3002</li> </ul>"},{"location":"linkedlist/linkedlist/#_7","title":"\u5b9e\u9645\u5e94\u7528","text":"<p>\u7f13\u5b58\u7b97\u6cd5</p> <p>\u6d4f\u89c8\u5668\u5386\u53f2\u8bb0\u5f55</p>"},{"location":"linkedlist/linkedlist/#leetcode","title":"<code>leetcode</code>","text":""},{"location":"linkedlist/linkedlist/#146-lru","title":"146. LRU \u7f13\u5b58","text":"<p>146. LRU \u7f13\u5b58</p> <p>\u8bf7\u4f60\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u6ee1\u8db3\u00a0 LRU (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) \u7f13\u5b58 \u7ea6\u675f\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5b9e\u73b0 LRUCache \u7c7b\uff1a</p> <ul> <li>LRUCache(int capacity) \u4ee5 \u6b63\u6574\u6570 \u4f5c\u4e3a\u5bb9\u91cf\u00a0capacity \u521d\u59cb\u5316 LRU \u7f13\u5b58</li> <li>int get(int key) \u5982\u679c\u5173\u952e\u5b57 key \u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u8fd4\u56de\u5173\u952e\u5b57\u7684\u503c\uff0c\u5426\u5219\u8fd4\u56de -1 \u3002</li> <li>void put(int key, int value)\u00a0\u5982\u679c\u5173\u952e\u5b57\u00a0key \u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u53d8\u66f4\u5176\u6570\u636e\u503c\u00a0value \uff1b\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u5411\u7f13\u5b58\u4e2d\u63d2\u5165\u8be5\u7ec4\u00a0key-value \u3002\u5982\u679c\u63d2\u5165\u64cd\u4f5c\u5bfc\u81f4\u5173\u952e\u5b57\u6570\u91cf\u8d85\u8fc7\u00a0capacity \uff0c\u5219\u5e94\u8be5 \u9010\u51fa \u6700\u4e45\u672a\u4f7f\u7528\u7684\u5173\u952e\u5b57\u3002</li> <li>\u51fd\u6570 get \u548c put \u5fc5\u987b\u4ee5 \\(O(1)\\) \u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u8fd0\u884c\u3002</li> </ul> <pre><code>public class LRUCache {\nHashMap&lt;Integer, Node&gt; map;\nDoubleLinkedList cache;\nint cap;\npublic LRUCache(int capacity){\nmap   = new HashMap&lt;&gt;();\ncache = new DoubleLinkedList();\ncap   = capacity;\n}\n\npublic void put(int key, int val){\nNode newNode = new Node(key, val);\n\nif(map.containsKey(key)){\ncache.delete(map.get(key));\ncache.addFirst(newNode);\nmap.put(key, newNode);\n}else{\nif(map.size() == cap){\nint k = cache.deleteLast();\nmap.remove(k);\n}\ncache.addFirst(newNode);\nmap.put(key, newNode);\n\n}\n}\n\npublic int get(int key){\nif(!map.containsKey(key))   return -1;\n\nint val = map.get(key).val;\nput(key, val);\n\nreturn val;\n}\n}\n\n/**\n*  head: recently used\n*  tail: LRU\n*/\nclass DoubleLinkedList{\nNode head;\nNode tail;\n\npublic DoubleLinkedList(){\nhead = new Node(0,0);\ntail = new Node(0,0);\n\nhead.next = tail;\ntail.prev = head;\n}\n\npublic void addFirst(Node node){\n\nnode.next   = head.next;\nnode.prev   = head;\n\nhead.next.prev = node;\nhead.next      = node;\n}\n\npublic int delete(Node n){\nint key = n.key;\nn.next.prev = n.prev;\nn.prev.next = n.next;\n\nreturn key;\n}\n\npublic int deleteLast(){\nif(head.next == tail)   return -1;\n\nreturn delete(tail.prev);\n}\n}\n\nclass Node{\npublic int key;\npublic int val;\npublic Node prev;\npublic Node next;\n\npublic Node(int key, int val){\nthis.key = key;\nthis.val = val;\n}\n}\n</code></pre>"},{"location":"linkedlist/linkedlist/#460-lfu","title":"460. LFU \u7f13\u5b58","text":"<p>460. LFU \u7f13\u5b58</p> <p>\u8bf7\u4f60\u4e3a \u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\uff08LFU\uff09\u7f13\u5b58\u7b97\u6cd5\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u6570\u636e\u7ed3\u6784\u3002</p> <p>\u5b9e\u73b0 LFUCache \u7c7b\uff1a</p> <ul> <li>LFUCache(int capacity) - \u7528\u6570\u636e\u7ed3\u6784\u7684\u5bb9\u91cf\u00a0capacity \u521d\u59cb\u5316\u5bf9\u8c61</li> <li>int get(int key)\u00a0- \u5982\u679c\u952e\u00a0key \u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u83b7\u53d6\u952e\u7684\u503c\uff0c\u5426\u5219\u8fd4\u56de -1 \u3002</li> <li>void put(int key, int value)\u00a0- \u5982\u679c\u952e\u00a0key \u5df2\u5b58\u5728\uff0c\u5219\u53d8\u66f4\u5176\u503c\uff1b\u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u8bf7\u63d2\u5165\u952e\u503c\u5bf9\u3002\u5f53\u7f13\u5b58\u8fbe\u5230\u5176\u5bb9\u91cf\u00a0capacity \u65f6\uff0c\u5219\u5e94\u8be5\u5728\u63d2\u5165\u65b0\u9879\u4e4b\u524d\uff0c\u79fb\u9664\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\u7684\u9879\u3002\u5728\u6b64\u95ee\u9898\u4e2d\uff0c\u5f53\u5b58\u5728\u5e73\u5c40\uff08\u5373\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u952e\u5177\u6709\u76f8\u540c\u4f7f\u7528\u9891\u7387\uff09\u65f6\uff0c\u5e94\u8be5\u53bb\u9664 \u6700\u8fd1\u6700\u4e45\u672a\u4f7f\u7528 \u7684\u952e\u3002</li> <li>\u4e3a\u4e86\u786e\u5b9a\u6700\u4e0d\u5e38\u4f7f\u7528\u7684\u952e\uff0c\u53ef\u4ee5\u4e3a\u7f13\u5b58\u4e2d\u7684\u6bcf\u4e2a\u952e\u7ef4\u62a4\u4e00\u4e2a \u4f7f\u7528\u8ba1\u6570\u5668 \u3002\u4f7f\u7528\u8ba1\u6570\u6700\u5c0f\u7684\u952e\u662f\u6700\u4e45\u672a\u4f7f\u7528\u7684\u952e\u3002</li> </ul> <p>\u5f53\u4e00\u4e2a\u952e\u9996\u6b21\u63d2\u5165\u5230\u7f13\u5b58\u4e2d\u65f6\uff0c\u5b83\u7684\u4f7f\u7528\u8ba1\u6570\u5668\u88ab\u8bbe\u7f6e\u4e3a 1 (\u7531\u4e8e put \u64cd\u4f5c)\u3002\u5bf9\u7f13\u5b58\u4e2d\u7684\u952e\u6267\u884c get \u6216 put \u64cd\u4f5c\uff0c\u4f7f\u7528\u8ba1\u6570\u5668\u7684\u503c\u5c06\u4f1a\u9012\u589e\u3002</p> <p>\u51fd\u6570 get \u548c put \u5fc5\u987b\u4ee5 \\(O(1)\\) \u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u8fd0\u884c\u3002</p> <pre><code>class LFUCache {\nMap&lt;Integer, Node&gt; cache; // \u5b58\u50a8\u7f13\u5b58\u7684\u5185\u5bb9\nMap&lt;Integer, DoublyLinkedList&gt; freqMap; // \u5b58\u50a8\u6bcf\u4e2a\u9891\u6b21\u5bf9\u5e94\u7684\u53cc\u5411\u94fe\u8868\nint size;\nint capacity;\nint min; // \u5b58\u50a8\u5f53\u524d\u6700\u5c0f\u9891\u6b21\n\npublic LFUCache(int capacity) {\ncache = new HashMap&lt;&gt; (capacity);\nfreqMap = new HashMap&lt;&gt;();\nthis.capacity = capacity;\n}\n\npublic int get(int key) {\nNode node = cache.get(key);\nif (node == null) {\nreturn -1;\n}\nfreqInc(node);\nreturn node.value;\n}\n\npublic void put(int key, int value) {\nif (capacity == 0) {\nreturn;\n}\nNode node = cache.get(key);\nif (node != null) {\nnode.value = value;\nfreqInc(node);\n} else {\nif (size == capacity) {\nDoublyLinkedList minFreqLinkedList = freqMap.get(min);\ncache.remove(minFreqLinkedList.tail.pre.key);\nminFreqLinkedList.removeNode(minFreqLinkedList.tail.pre); // \u8fd9\u91cc\u4e0d\u9700\u8981\u7ef4\u62a4min, \u56e0\u4e3a\u4e0b\u9762add\u4e86newNode\u540emin\u80af\u5b9a\u662f1.\nsize--;\n}\nNode newNode = new Node(key, value);\ncache.put(key, newNode);\nDoublyLinkedList linkedList = freqMap.get(1);\nif (linkedList == null) {\nlinkedList = new DoublyLinkedList();\nfreqMap.put(1, linkedList);\n}\nlinkedList.addNode(newNode);\nsize++;\nmin = 1;\n}\n}\n\nvoid freqInc(Node node) {\n// \u4ece\u539ffreq\u5bf9\u5e94\u7684\u94fe\u8868\u91cc\u79fb\u9664, \u5e76\u66f4\u65b0min\nint freq = node.freq;\nDoublyLinkedList linkedList = freqMap.get(freq);\nlinkedList.removeNode(node);\nif (freq == min &amp;&amp; linkedList.head.post == linkedList.tail) {\nmin = freq + 1;\n}\n// \u52a0\u5165\u65b0freq\u5bf9\u5e94\u7684\u94fe\u8868\nnode.freq++;\nlinkedList = freqMap.get(freq + 1);\nif (linkedList == null) {\nlinkedList = new DoublyLinkedList();\nfreqMap.put(freq + 1, linkedList);\n}\nlinkedList.addNode(node);\n}\n}\n\nclass Node {\nint key;\nint value;\nint freq = 1;\nNode pre;\nNode post;\n\npublic Node() {}\n\npublic Node(int key, int value) {\nthis.key = key;\nthis.value = value;\n}\n}\n\nclass DoublyLinkedList {\nNode head;\nNode tail;\n\npublic DoublyLinkedList() {\nhead = new Node();\ntail = new Node();\nhead.post = tail;\ntail.pre = head;\n}\n\nvoid removeNode(Node node) {\nnode.pre.post = node.post;\nnode.post.pre = node.pre;\n}\n\nvoid addNode(Node node) {\nnode.post = head.post;\nhead.post.pre = node;\nhead.post = node;\nnode.pre = head;\n}\n}\n</code></pre>"},{"location":"linkedlist/linkedlist/#1472","title":"1472. \u8bbe\u8ba1\u6d4f\u89c8\u5668\u5386\u53f2\u8bb0\u5f55","text":"<p>1472. \u8bbe\u8ba1\u6d4f\u89c8\u5668\u5386\u53f2\u8bb0\u5f55</p> <p>\u4f60\u6709\u4e00\u4e2a\u53ea\u652f\u6301\u5355\u4e2a\u6807\u7b7e\u9875\u7684 \u6d4f\u89c8\u5668\u00a0\uff0c\u6700\u5f00\u59cb\u4f60\u6d4f\u89c8\u7684\u7f51\u9875\u662f\u00a0<code>homepage</code>\u00a0\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee\u5176\u4ed6\u7684\u7f51\u7ad9\u00a0<code>url</code>\u00a0\uff0c\u4e5f\u53ef\u4ee5\u5728\u6d4f\u89c8\u5386\u53f2\u4e2d\u540e\u9000\u00a0<code>steps</code>\u00a0\u6b65\u6216\u524d\u8fdb\u00a0<code>steps</code>\u00a0\u6b65\u3002</p> <p>\u8bf7\u4f60\u5b9e\u73b0\u00a0<code>BrowserHistory</code> \u7c7b\uff1a</p> <ul> <li><code>BrowserHistory(string homepage)</code>\u00a0\uff0c\u7528\u00a0<code>homepage</code>\u00a0\u521d\u59cb\u5316\u6d4f\u89c8\u5668\u7c7b\u3002</li> <li><code>void visit(string url)</code>\u00a0\u4ece\u5f53\u524d\u9875\u8df3\u8f6c\u8bbf\u95ee <code>url</code> \u5bf9\u5e94\u7684\u9875\u9762\u00a0\u00a0\u3002\u6267\u884c\u6b64\u64cd\u4f5c\u4f1a\u628a\u6d4f\u89c8\u5386\u53f2\u524d\u8fdb\u7684\u8bb0\u5f55\u5168\u90e8\u5220\u9664\u3002</li> <li><code>string back(int steps)</code>\u00a0\u5728\u6d4f\u89c8\u5386\u53f2\u4e2d\u540e\u9000\u00a0<code>steps</code>\u00a0\u6b65\u3002\u5982\u679c\u4f60\u53ea\u80fd\u5728\u6d4f\u89c8\u5386\u53f2\u4e2d\u540e\u9000\u81f3\u591a\u00a0<code>x</code> \u6b65\u4e14\u00a0<code>steps &gt; x</code>\u00a0\uff0c\u90a3\u4e48\u4f60\u53ea\u540e\u9000\u00a0<code>x</code>\u00a0\u6b65\u3002\u8bf7\u8fd4\u56de\u540e\u9000 \u81f3\u591a <code>steps</code>\u00a0\u6b65\u4ee5\u540e\u7684\u00a0<code>url</code>\u00a0\u3002</li> <li><code>string forward(int steps)</code>\u00a0\u5728\u6d4f\u89c8\u5386\u53f2\u4e2d\u524d\u8fdb\u00a0<code>steps</code>\u00a0\u6b65\u3002\u5982\u679c\u4f60\u53ea\u80fd\u5728\u6d4f\u89c8\u5386\u53f2\u4e2d\u524d\u8fdb\u81f3\u591a\u00a0<code>x</code>\u00a0\u6b65\u4e14\u00a0<code>steps &gt; x</code>\u00a0\uff0c\u90a3\u4e48\u4f60\u53ea\u524d\u8fdb <code>x</code>\u00a0\u6b65\u3002\u8bf7\u8fd4\u56de\u524d\u8fdb\u00a0\u81f3\u591a\u00a0<code>steps</code>\u6b65\u4ee5\u540e\u7684 <code>url</code>\u00a0\u3002</li> </ul> <pre><code>class BrowserHistory {\nNode page;\nNode temp = page;\npublic BrowserHistory(String homepage) {\npage = new Node(homepage);\n}\n\npublic void visit(String url) {\nNode newPage = new Node(url);\nnewPage.next = null;\npage.next = newPage;\nnewPage.pre = page;\npage = page.next;\n}\n\npublic String back(int steps) {\nwhile (steps != 0) {\nif (page.pre == temp) {\nbreak;\n}else {\npage = page.pre;\nsteps--;\n}\n}\nreturn page.str;\n}\n\npublic String forward(int steps) {\nwhile (steps != 0) {\nif (page.next == null) {\nbreak;\n}else {\npage = page.next;\nsteps--;\n}\n}\nreturn page.str;\n}\n}\n\nclass Node {\nString str;\nNode pre;\nNode next;\nNode(String str) {this.str = str;}\n}\n</code></pre>"},{"location":"queue/queue/","title":"\u961f\u5217<code>Queue</code>","text":""},{"location":"queue/queue/#_1","title":"\u601d\u7ef4\u5bfc\u56fe","text":""},{"location":"queue/queue/#_2","title":"\u7279\u6027","text":"<ul> <li>\u5148\u5165\u5148\u51fa</li> <li>\u7ebf\u6027</li> <li>\u961f\u9996\uff1a\u961f\u5217\u5934\u90e8</li> <li>\u961f\u5c3e\uff1a\u961f\u5217\u5c3e\u90e8</li> <li>\u5165\u961f\uff1a\u52a0\u5165\u961f\u5c3e</li> <li>\u51fa\u961f\uff1a\u5220\u9664\u961f\u9996</li> </ul>"},{"location":"queue/queue/#java","title":"<code>Java</code>\u7528\u6cd5","text":"<pre><code>Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();\nqueue.offer(1);//\u5165\u961f\nint peek = queue.peek();//\u8bbf\u95ee\u961f\u9996\u5143\u7d20\nint pop = queue.pop();//\u51fa\u961f\nint size = queue.size();//\u83b7\u53d6\u961f\u5217\u7684\u957f\u5ea6\nboolean isEmpty = queue.isEmpty();//\u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\n</code></pre>"},{"location":"queue/queue/#_3","title":"\u5b9e\u73b0\u65b9\u5f0f","text":"<p>\u94fe\u8868</p> <p>\u4f7f\u7528\u4e24\u4e2a\u5355\u94fe\u8868\uff0c\u4e00\u4e2a\u4f5c\u4e3a\u961f\u9996\uff0c\u4e00\u4e2a\u4f5c\u4e3a\u961f\u5c3e</p> <pre><code>public class LinkedListQueue{\nprivate ListNode front, rear;\nprivate int N;\n\npublic LinkedListQueue(){\nfront = null;\nrear = null;\n}\n\npublic int size(){return N;}\n\npublic boolean isEmpty(){return size() == 0;}\n\npublic void push(int num){\nListNode node = new ListNode(num);\nif(front == null){\nfront = node;\nrear = node;\n} else {\nrear.next = node;\nrear = node;\n}\nN++;\n}\n\npublic int pop(){\nint peek = peek();\nfront = front.next;\nN--;\nreturn peek;\n}\n\npublic int peek(){\nif(size() ==0) throw new EmptyQueueException();\nreturn front.val;\n}\n\n}\n</code></pre> <p>\u6570\u7ec4</p> <p>\u73af\u5f62\u6570\u7ec4</p> <pre><code>public class ArrayQueue{\nprivate int[] nums;\nprivate int front;\nprivate int N;\npublic ArrayQueue(int capacity){\nnums = new int[capacity];\nfront = 0;\nN = 0;\n}\n\npublic int capacity(){\nreturn nums.length;\n}\n\npublic int size(){\nreturn N;\n}\n\npublic boolean isEmpty(){\nreturn size() == 0;\n}\n\npublic void push(int num){\nif(N == capacity()){\nthrow new QueueCapacityException();\n}\n\nint rear = (front + N) % capacity();\n\nnums[rear] = num;\n\nN++;\n}\n\npublic int peek(){\nif(size() ==0) throw new EmptyQueueException();\nreturn nums[front];\n}\n\npublic int pop(){\nint peek = peek();\nfront = (front+1) % capacity();\nN--;\nreturn peek;\n}\n}\n</code></pre>"},{"location":"queue/queue/#_4","title":"\u5b9e\u9645\u5e94\u7528","text":"<p>\u6dd8\u5b9d\u8ba2\u5355</p> <p>\u8d2d\u7269\u8005\u4e0b\u5355\u540e\uff0c\u8ba2\u5355\u5c31\u88ab\u52a0\u5165\u5230\u961f\u5217\u4e4b\u4e2d\uff0c\u968f\u540e\u7cfb\u7edf\u518d\u6839\u636e\u987a\u5e8f\u4f9d\u6b21\u5904\u7406\u961f\u5217\u4e2d\u7684\u8ba2\u5355</p> <p>\u6253\u5370\u673a\u7684\u4efb\u52a1\u961f\u5217</p> <p>\u9910\u5385\u7684\u51fa\u9910\u961f\u5217</p>"},{"location":"queue/queue/#leetcode","title":"<code>leetcode</code>","text":""},{"location":"queue/queue/#225","title":"225. \u7528\u961f\u5217\u5b9e\u73b0\u6808","text":"<p>225. \u7528\u961f\u5217\u5b9e\u73b0\u6808</p> <p>\u8bf7\u4f60\u4ec5\u4f7f\u7528\u4e24\u4e2a\u961f\u5217\u5b9e\u73b0\u4e00\u4e2a\u540e\u5165\u5148\u51fa\uff08LIFO\uff09\u7684\u6808\uff0c\u5e76\u652f\u6301\u666e\u901a\u6808\u7684\u5168\u90e8\u56db\u79cd\u64cd\u4f5c\uff08push\u3001top\u3001pop \u548c empty\uff09\u3002</p> <p>\u5b9e\u73b0 MyStack \u7c7b\uff1a</p> <ul> <li>void push(int x) \u5c06\u5143\u7d20 x \u538b\u5165\u6808\u9876\u3002</li> <li>int pop() \u79fb\u9664\u5e76\u8fd4\u56de\u6808\u9876\u5143\u7d20\u3002</li> <li>int top() \u8fd4\u56de\u6808\u9876\u5143\u7d20\u3002</li> <li>boolean empty() \u5982\u679c\u6808\u662f\u7a7a\u7684\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002</li> </ul> <pre><code>class MyStack {\n\nprivate Queue&lt;Integer&gt; A;\nprivate Queue&lt;Integer&gt; B;\n\npublic MyStack() {\nA = new LinkedList&lt;&gt;();\nB = new LinkedList&lt;&gt;();\n}\n\npublic void push(int x) {\nB.offer(x);\nwhile(!A.isEmpty())B.offer(A.poll());\nQueue&lt;Integer&gt; temp = A;\nA = B;\nB = temp;\n}\n\npublic int pop() {\nreturn A.poll();\n}\n\npublic int top() {\nreturn A.peek();\n}\n\npublic boolean empty() {\nreturn A.size() == 0;\n}\n}\n</code></pre>"},{"location":"queue/queue/#32","title":"32. \u7528\u6808\u5b9e\u73b0\u961f\u5217","text":"<p>232. \u7528\u6808\u5b9e\u73b0\u961f\u5217</p> <p>\u8bf7\u4f60\u4ec5\u4f7f\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u5148\u5165\u5148\u51fa\u961f\u5217\u3002\u961f\u5217\u5e94\u5f53\u652f\u6301\u4e00\u822c\u961f\u5217\u652f\u6301\u7684\u6240\u6709\u64cd\u4f5c\uff08push\u3001pop\u3001peek\u3001empty\uff09\uff1a</p> <p>\u5b9e\u73b0 MyQueue \u7c7b\uff1a</p> <ul> <li>void push(int x) \u5c06\u5143\u7d20 x \u63a8\u5230\u961f\u5217\u7684\u672b\u5c3e</li> <li>int pop() \u4ece\u961f\u5217\u7684\u5f00\u5934\u79fb\u9664\u5e76\u8fd4\u56de\u5143\u7d20</li> <li>int peek() \u8fd4\u56de\u961f\u5217\u5f00\u5934\u7684\u5143\u7d20</li> <li>boolean empty() \u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false</li> </ul> <pre><code>class MyQueue {\n\nStack&lt;Integer&gt; A;\n\nStack&lt;Integer&gt; B;\n\npublic MyQueue() {\nA = new Stack&lt;&gt;();\nB = new Stack&lt;&gt;();\n}\n\npublic void push(int x) {\nB.push(x);\n\n}\n\npublic int pop() {\n\nif(A.isEmpty()){\nwhile(!B.isEmpty())A.push(B.pop());\n}\n\nreturn A.pop();\n}\n\npublic int peek() {\nif(A.isEmpty()){\nwhile(!B.isEmpty())A.push(B.pop());\n}\n\nreturn A.peek();\n}\n\npublic boolean empty() {\nreturn A.isEmpty()&amp;&amp;B.isEmpty();\n}\n}\n</code></pre>"},{"location":"queue/queue/#offer-50","title":"\u5251\u6307 Offer 50. \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26","text":"<p>\u5251\u6307 Offer 50. \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26</p> <p>\u5728\u5b57\u7b26\u4e32 s \u4e2d\u627e\u51fa\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56de\u4e00\u4e2a\u5355\u7a7a\u683c\u3002 s \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</p> <pre><code>class Solution {\npublic char firstUniqChar(String s) {\n\nMap&lt;Character, Integer&gt; dict = new HashMap&lt;&gt;();\n\nQueue&lt;Character&gt; queue = new LinkedList&lt;&gt;();\n\nfor(int i=0;i&lt;s.length();i++){\nchar c = s.charAt(i);\nif(!dict.containsKey(c)){\ndict.put(c, i);\nqueue.offer(c);\n} else {\ndict.put(c,-1);\nwhile(!queue.isEmpty()&amp;&amp;dict.get(queue.peek())==-1)queue.poll();\n\n}\n\n}\n\nreturn queue.isEmpty() ? ' ' : queue.poll();\n}\n}\n</code></pre>"},{"location":"stack/stack/","title":"\u6808 <code>Stack</code>","text":""},{"location":"stack/stack/#_1","title":"\u601d\u7ef4\u5bfc\u56fe","text":""},{"location":"stack/stack/#_2","title":"\u7279\u6027","text":"<ul> <li>\u5148\u5165\u540e\u51fa</li> <li>\u7ebf\u6027</li> <li>\u7c7b\u6bd4\u4e0e\u684c\u5b50\u4e0a\u7684\u90ae\u4ef6\uff0c\u65b0\u90ae\u4ef6\u653e\u5728\u6700\u4e0a\u9762</li> <li>\u4e00\u645e\u5143\u7d20\u7684\u9876\u90e8\u4fd7\u79f0\u6808\u9876</li> <li>\u5165\u6808\uff1a\u5143\u7d20\u6dfb\u52a0\u5230\u6808\u9876</li> <li>\u51fa\u6808\uff1a\u5220\u9664\u6808\u9876\u5143\u7d20</li> </ul>"},{"location":"stack/stack/#java","title":"<code>Java</code>\u7528\u6cd5","text":"<pre><code>Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();\nstack.push(1);//\u5165\u6808\nint pop = stack.pop();//\u51fa\u6808\nint peek = stack.peek();//\u8bbf\u95ee\u6808\u9876\u5143\u7d20\uff0c\u4e0d\u5220\u9664\u6808\u9876\u5143\u7d20\n</code></pre>"},{"location":"stack/stack/#_3","title":"\u5b9e\u73b0\u65b9\u5f0f","text":"<p>1. \u94fe\u8868</p> <p>\u4f7f\u7528\u5355\u94fe\u8868\uff0c\u94fe\u8868\u9876\u7aef\u63d2\u5165\u5b9e\u73b0push\uff0c \u5220\u9664\u9876\u7aef\u5b9e\u73b0pop\uff0c\u8bbf\u95ee\u9876\u7aef\u5b9e\u73b0peek\u3002</p> <pre><code>public class Stack&lt;Item&gt; {\n\nprivate Node first;\n\nprivate int N;\n\nprivate class Node {\nItem item;\nNode next;\n}\n\npublic boolean isEmpty(){return first == null;}\n\npublic int size(){return N;}\n\npublic void push(Item item){\nNode oldFirst = first;\nfirst = new Node();\nfirst.item = item;\nfirst.next = oldFirst;\nN++;\n}\n\npublic Item pop(){\nItem item = first.item;\nfirst = first.next;\nN--;\n}\n}\n</code></pre> <p>2. \u6570\u7ec4</p> <p>\u4f7f\u7528\u6570\u7ec4\uff0c\u5c3e\u90e8\u63d2\u5165\u5143\u7d20\u5b9e\u73b0push\uff0c\u5c3e\u90e8\u5220\u9664\u5143\u7d20\u5b9e\u73b0pop</p> <pre><code>public class Stack&lt;Item&gt; {\n\nprivate ArrayList&lt;Item&gt; list;\n\npublic boolean isEmpty(){return list.size()==0;}\n\npublic int size(){return list.size();}\n\npublic void push(Item item){\nlist.add(item);\n}\n\npublic Item pop(){\nreturn list.remove(list.size()-1);\n}\n}\n</code></pre>"},{"location":"stack/stack/#_4","title":"\u5b9e\u9645\u5e94\u7528","text":"<p>\u5e73\u8861\u7b26\u53f7</p> <p>\u7f16\u8bd1\u5668\u68c0\u67e5\u82b1\u62ec\u53f7\u3001\u65b9\u62ec\u53f7\u3001\u5706\u62ec\u53f7\u7b49\u662f\u5426\u6210\u5bf9\u51fa\u73b0\uff0c\u53ef\u4ee5\u4f7f\u7528\u6808\u6765\u5b9e\u73b0\u3002\u505a\u4e00\u4e2a\u7a7a\u6808\u3002\u8bfb\u5165\u5b57\u7b26\u76f4\u5230\u6587\u4ef6\u672b\u5c3e\u3002a.\u9047\u5230\u8d77\u59cb\u62ec\u53f7\uff0c\u5219\u63a8\u5165\u6808\uff1bb.\u9047\u5230\u7ed3\u5c3e\u62ec\u53f7\uff0c\u5982\u679c\u6808\u4e3a\u7a7a\u5219\u62a5\u9519\u3002\u5426\u5219\uff0c\u5c06\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u5982\u679c\u5f39\u51fa\u7684\u5143\u7d20\u4e0d\u662f\u5bf9\u5e94\u7684\u8d77\u59cb\u62ec\u53f7\uff0c\u5219\u62a5\u9519\u3002\u5982\u679c\u8bfb\u5230\u6587\u4ef6\u672b\u5c3e\u65f6\uff0c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u4e5f\u62a5\u9519\u3002</p> <p>\u65b9\u6cd5\u8c03\u7528</p> <p>\u6bcf\u5f53\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u5728\u6808\u9876\u6dfb\u52a0\u4e00\u4e2a\u6808\u5e27\uff0c\u7528\u6765\u8bb0\u5f55\u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u5728\u9012\u5f52\u51fd\u6570\u4e2d\uff0c\u5411\u4e0b\u9012\u63a8\u4f1a\u4e0d\u65ad\u6267\u884c\u5165\u6808\uff0c\u5411\u4e0a\u56de\u6eaf\u9636\u6bb5\u65f6\u51fa\u6808\u3002</p> <p>\u6d4f\u89c8\u5668\u524d\u8fdb\u540e\u9000, \u8f6f\u4ef6\u4e2d\u7684\u64a4\u9500\u4e0e\u53cd\u64a4\u9500</p> <p>\u6bcf\u5f53\u6211\u4eec\u6253\u5f00\u65b0\u7684\u7f51\u9875\uff0c\u6d4f\u89c8\u5668\u5c31\u5c06\u4e0a\u4e00\u4e2a\u7f51\u9875\u6267\u884c\u5165\u6808\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u300c\u540e\u9000\u300d\u64cd\u4f5c\u6765\u56de\u5230\u4e0a\u4e00\u9875\u9762\uff0c\u540e\u9000\u64cd\u4f5c\u5b9e\u9645\u4e0a\u662f\u5728\u6267\u884c\u51fa\u6808\u3002\u5982\u679c\u8981\u540c\u65f6\u652f\u6301\u540e\u9000\u548c\u524d\u8fdb\uff0c\u90a3\u4e48\u5219\u9700\u8981\u4e24\u4e2a\u6808\u6765\u914d\u5408\u5b9e\u73b0\u3002</p>"},{"location":"stack/stack/#leetcode","title":"<code>leetcode</code>","text":""},{"location":"stack/stack/#20","title":"20. \u6709\u6548\u7684\u62ec\u53f7","text":"<p>20. \u6709\u6548\u7684\u62ec\u53f7</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec '('\uff0c')'\uff0c'{'\uff0c'}'\uff0c'['\uff0c']'\u00a0\u7684\u5b57\u7b26\u4e32 s \uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002</p> <p>\u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a</p> <ol> <li> <p>\u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002</p> </li> <li> <p>\u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002</p> </li> <li> <p>\u6bcf\u4e2a\u53f3\u62ec\u53f7\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u76f8\u540c\u7c7b\u578b\u7684\u5de6\u62ec\u53f7\u3002 <pre><code>class Solution {\npublic boolean isValid(String s) {\nStack&lt;Character&gt; stack = new Stack&lt;&gt;();\nMap&lt;Character, Character&gt; dict = new HashMap&lt;&gt;();\n\ndict.put(')','(');\ndict.put(']','[');\ndict.put('}','{');\n\nfor(char c: s.toCharArray()){\n\nif(c == '(' || c == '[' || c == '{'){\nstack.push(c);\n}else {\nif(stack.isEmpty())return false;\n\nif(stack.pop() != dict.get(c))return false;\n}\n}\nreturn stack.isEmpty();\n}\n}\n</code></pre> <code>ASCII\u7801\u8868</code>\u4e2d\u8d77\u59cb\u62ec\u53f7\u4e0e\u7ed3\u5c3e\u62ec\u53f7\u76f8\u5dee1\u6216\u80052\uff0c\u6240\u4ee5\u4ee5\u4e0a\u4ee3\u7801\u8fd8\u53ef\u4ee5\u4f18\u5316 <pre><code>class Solution {\npublic boolean isValid(String s) {\nStack&lt;Character&gt; stack = new Stack&lt;&gt;();\n\nfor(char c: s.toCharArray()){\n\nif(c == '(' || c == '[' || c == '{'){\nstack.push(c);\n}else {\nif(stack.isEmpty())return false;\nint pop = stack.pop();\nif(pop != c-1 &amp;&amp; pop != c-2)return false;\n}\n}\nreturn stack.isEmpty();\n}\n}\n</code></pre></p> </li> </ol>"},{"location":"stack/stack/#234","title":"234. \u56de\u6587\u94fe\u8868","text":"<p>234. \u56de\u6587\u94fe\u8868</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 head \uff0c\u8bf7\u4f60\u5224\u65ad\u8be5\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002\u5982\u679c\u662f\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 <pre><code>/**\n* Definition for singly-linked list.\n* public class ListNode {\n    *     int val;\n    *     ListNode next;\n    *     ListNode() {}\n    *     ListNode(int val) { this.val = val; }\n    *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n    * }\n    */\nclass Solution {\npublic boolean isPalindrome(ListNode head) {\nStack&lt;Integer&gt; stack = new Stack&lt;&gt;();\nListNode temp = head;\nwhile(temp!=null){\nstack.push(temp.val);\ntemp = temp.next;\n}\n\nwhile(!stack.isEmpty()){\n\nif(head.val!=stack.pop())return false;\nhead = head.next;\n}\n\nreturn true;\n}\n}\n</code></pre> \u8fd9\u91cc\u76f8\u5f53\u4e8e\u94fe\u8868\u4ece\u524d\u5f80\u540e\u5168\u90e8\u90fd\u6bd4\u8f83\u4e86\u4e00\u904d\uff0c\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u62ff\u94fe\u8868\u7684\u540e\u534a\u90e8\u5206\u548c\u524d\u534a\u90e8\u5206\u6bd4\u8f83\u5373\u53ef\uff0c\u6ca1\u5fc5\u8981\u5168\u90e8\u6bd4\u8f83\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b <pre><code>/**\n* Definition for singly-linked list.\n* public class ListNode {\n    *     int val;\n    *     ListNode next;\n    *     ListNode() {}\n    *     ListNode(int val) { this.val = val; }\n    *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n    * }\n    */\nclass Solution {\npublic boolean isPalindrome(ListNode head) {\nStack&lt;Integer&gt; stack = new Stack&lt;&gt;();\nListNode temp = head;\nint length = 0;\nwhile(temp!=null){\nstack.push(temp.val);\ntemp = temp.next;\nlength++;\n}\nlength/=2;\nwhile(length-- &gt; 0){\n\nif(head.val!=stack.pop())return false;\nhead = head.next;\n}\n\nreturn true;\n}\n}\n</code></pre></p>"},{"location":"stack/stack/#94","title":"94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386","text":"<p>94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8fd4\u56de \u5b83\u7684 \u4e2d\u5e8f \u904d\u5386 \u3002 <pre><code>/**\n* Definition for a binary tree node.\n* public class TreeNode {\n    *     int val;\n    *     TreeNode left;\n    *     TreeNode right;\n    *     TreeNode() {}\n    *     TreeNode(int val) { this.val = val; }\n    *     TreeNode(int val, TreeNode left, TreeNode right) {\n    *         this.val = val;\n    *         this.left = left;\n    *         this.right = right;\n    *     }\n    * }\n    */\nclass Solution {\npublic List&lt;Integer&gt; inorderTraversal(TreeNode root) {\nList&lt;Integer&gt; res = new ArrayList&lt;&gt;();\nStack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();\nwhile(root!=null || !stack.isEmpty()){\nwhile(root!=null){\nstack.push(root);\nroot = root.left;\n}\nroot = stack.pop();\nres.add(root.val);\nroot = root.right;\n\n}\n\nreturn res;\n}\n}\n</code></pre></p>"},{"location":"stack/stack_test1/","title":"\u6808","text":"<p>2023-03-21</p> <p>61</p>"},{"location":"stack/stack_test1/#_2","title":"\u7b2c\u4e00\u6b21\u6d4b\u8bd5","text":"<p>\u7279\u6027 18 6</p> <ul> <li>\u5148\u5165\u540e\u51fa</li> <li>\u7ebf\u6027</li> </ul>"},{"location":"stack/stack_test1/#java-12-0","title":"java\u7528\u6cd5 12 0","text":"<p>\u5b9e\u73b0\u65b9\u5f0f 40</p> <p>\u94fe\u8868 20 10</p> <pre><code>public class Stack&lt;Item&gt;{\npublic Node&lt;Item&gt; first;\npublic int N;\n\npublic class Node{\npublic Item item;\npublic Node next;\n}\n\npublic boolean isEmpty(){return first == null;}\n\npublic int size(){return N;}\n\npublic void push(Item item){\nNode oldFirst = first;\n//first = new Node();\nfirst.item = item;\nfirst.next = oldFirst;\nN++;\n}\n\npublic Item pop(){\n\nItem item = first.item;\n\nfirst = first.next;\n\nN--;\n\nreturn item;\n}\n\n}\n</code></pre> <p>\u6570\u7ec4 20 20</p> <pre><code>public class Stack&lt;Item&gt;{\n\nprivate ArrayList&lt;Item&gt; list;\n\npublic boolean isEmpty(){return list.size() == 0;}\n\npublic int size(){return list.size();}\n\npublic void push(Item item){\nlist.add(item);\n}\n\npublic Item pop(){\nreturn list.remove(list.size()-1);\n}\n}\n</code></pre> <p>\u5e94\u7528 30 25</p> <ol> <li>\u5e73\u8861\u7b26\u53f7 \u7f16\u8bd1\u5668\u7f16\u8bd1\u62ec\u53f7\u7684\u5408\u6cd5\u6027\uff0c\u662f\u5426\u95ed\u73af\uff0c\u5229\u7528\u4e00\u4e2a\u6808\u6765\u5b9e\u73b0\u3002 \u8bfb\u53d6\u6587\u4ef6\u76f4\u5230\u5c3e\u90e8\uff0c\u5982\u679c\u662f\u8d77\u59cb\u62ec\u53f7\uff0c\u5219\u63a8\u5165\u6808\u4e2d\u3002\u5982\u679c\u662f\u7ed3\u5c3e\u62ec\u53f7\uff0c\u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a\u3002\u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u62a5\u9519\uff1b\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u63a8\u51fa\u6808\u9876\u5143\u7d20\u3002\u5982\u679c\u63a8\u51fa\u7684\u5143\u7d20\u4e0e\u5f53\u524d\u62ec\u53f7\u4e0d\u5339\u914d\uff0c\u5219\u62a5\u9519\u3002 \u5982\u679c\u626b\u63cf\u5230\u5c3e\u90e8\u540e\uff0c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u62a5\u9519\u3002</li> <li>\u6d4f\u89c8\u5668\u7684\u540e\u9000\u4e0e\u524d\u8fdb\uff0c\u8f6f\u4ef6\u7684\u64a4\u9500\u4e0e\u53cd\u64a4\u9500\u3002</li> <li>\u65b9\u6cd5\u8c03\u7528\uff0c\u6bcf\u5f53\u6709\u65b0\u65b9\u6cd5\u8c03\u7528\uff0c\u5219\u5c06\u51fd\u6570\u53d8\u91cf\u3001\u5730\u5740\u7b49\u63a8\u5165\u6808\u9876\uff0c\u8be5\u5f15\u7528\u4e3a\u6808\u5e27\uff0c\u65b9\u6cd5\u6267\u884c\u5b8c\u540e\uff0c\u6267\u884c\u51fa\u6808\uff0c\u5373\u6808\u5e27\u51fa\u6808\u6216\u6808\u9876\u5143\u7d20\u51fa\u6808\u3002\u51fd\u6570\u9012\u5f52</li> </ol>"},{"location":"tree/2_3_tree/","title":"2-3\u67e5\u627e\u6811","text":""},{"location":"tree/2_3_tree/#_1","title":"\u601d\u7ef4\u5bfc\u56fe","text":""},{"location":"tree/2_3_tree/#_2","title":"\u5b9a\u4e49","text":"<p>2-3\u67e5\u627e\u6811</p> <p>\u4e00\u68f52-3\u67e5\u627e\u6811\u6216\u4e3a\u4e00\u68f5\u7a7a\u6811\uff0c\u6216\u7531\u4ee5\u4e0b\u7ed3\u70b9\u7ec4\u6210\uff1a</p> <ul> <li> 2-\u7ed3\u70b9\uff0c\u542b\u6709\u4e00\u4e2a\u952e\u548c\u4e24\u6761\u94fe\u63a5\uff0c\u5de6\u94fe\u63a5\u6307\u5411\u7684\u952e\u5c0f\u4e8e\u8be5\u7ed3\u70b9\uff0c\u53f3\u94fe\u63a5\u6307\u5411\u7684\u952e\u5927\u4e8e\u8be5\u7ed3\u70b9\u3002</li> <li> 3-\u7ed3\u70b9\uff0c\u542b\u6709\u4e24\u4e2a\u952e\u548c\u4e09\u6761\u94fe\u63a5\uff0c\u5de6\u94fe\u63a5\u6307\u5411\u7684\u952e\u5c0f\u4e8e\u8be5\u7ed3\u70b9\uff0c\u4e2d\u94fe\u63a5\u6307\u5411\u7684\u952e\u4f4d\u4e8e\u8be5\u8282\u70b9\u4e24\u952e\u4e4b\u95f4\uff0c\u53f3\u94fe\u63a5\u6307\u5411\u7684\u952e\u5927\u4e8e\u8be5\u7ed3\u70b9\u3002</li> </ul> 2-\u7ed3\u70b93-\u7ed3\u70b9 <p></p> <p></p>"},{"location":"tree/2_3_tree/#_3","title":"\u7279\u6027","text":"<ul> <li>\u4e00\u68f5\u5b8c\u7f8e\u5e73\u8861\u76842-3\u67e5\u627e\u6811\u4e2d\u7684\u6240\u6709\u7a7a\u94fe\u63a5\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u90fd\u5e94\u8be5\u662f\u76f8\u540c\u7684</li> <li>\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u6709\u4e00\u6216\u4e24\u4e2a\u952e</li> <li>\u5f53\u7ed3\u70b9\u6709\u4e00\u4e2a\u952e\uff0c\u7ed3\u70b9\u6709\u4e24\u4e2a\u94fe\u63a5</li> <li>\u5f53\u7ed3\u70b9\u6709\u4e24\u4e2a\u952e\uff0c\u7ed3\u70b9\u6709\u4e09\u4e2a\u94fe\u63a5</li> <li>\u6240\u6709\u53f6\u7ed3\u70b9\u5728\u540c\u4e00\u5c42</li> <li>\u67e5\u627e\u4e0e\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(\\log n)\\)</li> </ul>"},{"location":"tree/2_3_tree/#_4","title":"\u5e38\u7528\u64cd\u4f5c","text":""},{"location":"tree/2_3_tree/#_5","title":"\u67e5\u627e","text":"<p>\u4e0e\u4e8c\u53c9\u641c\u7d22\u6811\u6216\u8005\u4e8c\u5206\u67e5\u627e\u7c7b\u4f3c\uff0c\u4ece\u6839\u8282\u70b9\u9012\u5f52\u5411\u4e0b\u67e5\u627e\uff0c \u533a\u522b\u662f\u9047\u52302-\u7ed3\u70b9\u62163-\u7ed3\u70b9\uff0c\u8981\u5faa\u73af\u6bd4\u5bf9\u5927\u5c0f</p> \u67e5\u627e1.\u67e5\u627e2. <p></p> <p></p>"},{"location":"tree/2_3_tree/#_6","title":"\u63d2\u5165","text":""},{"location":"tree/2_3_tree/#1-2-","title":"1. \u54112-\u7ed3\u70b9\u63d2\u5165\u65b0\u952e","text":"<p>\u54112-\u7ed3\u70b9\u63d2\u5165\u65b0\u952e</p> 1.11.2 <p></p> <p></p>"},{"location":"tree/2_3_tree/#2-3-","title":"2. \u5411\u4e00\u68f5\u53ea\u542b\u6709\u4e00\u4e2a3-\u7ed3\u70b9\u7684\u6811\u4e2d\u63d2\u5165\u65b0\u952e","text":"<p>\u5411\u4e00\u68f5\u53ea\u542b\u6709\u4e00\u4e2a3-\u7ed3\u70b9\u7684\u6811\u4e2d\u63d2\u5165\u65b0\u952e</p> <ol> <li>\u63d2\u5165\u65b0\u952e\uff0c\u6682\u65f6\u4f7f\u5176\u53d8\u4e3a4-\u7ed3\u70b9\uff08\u4e09\u4e2a\u7ed3\u70b9\uff0c4\u4e2a\u94fe\u63a5\uff09</li> <li>\u5c064-\u7ed3\u70b9\u7684\u4e2d\u95f4\u952e\u63d0\u5347\u4e3a\u6839\u8282\u70b9\uff0c4-\u7ed3\u70b9\u7684\u5de6\u952e\u4f5c\u4e3a\u7236\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\uff0c4-\u7ed3\u70b9\u7684\u53f3\u952e\u4f5c\u4e3a\u7236\u7ed3\u70b9\u7684\u53f3\u5b50\u6811</li> </ol> 2.12.22.3 <p></p> <p></p> <p></p>"},{"location":"tree/2_3_tree/#3-23","title":"3. \u5411\u4e00\u4e2a\u7236\u7ed3\u70b9\u4e3a2\u7ed3\u70b9\u76843\u7ed3\u70b9\u4e2d\u63d2\u5165\u65b0\u952e","text":"<p>\u5411\u4e00\u4e2a\u7236\u7ed3\u70b9\u4e3a2\u7ed3\u70b9\u76843\u7ed3\u70b9\u4e2d\u63d2\u5165\u65b0\u952e</p> <ol> <li>\u63d2\u5165\u65b0\u952e\uff0c\u6682\u65f6\u4f7f\u5176\u53d8\u4e3a4-\u7ed3\u70b9</li> <li>\u628a4-\u7ed3\u70b9\u7684\u4e2d\u95f4\u952e\u63d0\u5347\uff0c\u4e0e\u7236\u7ed3\u70b9\u7ec4\u62103-\u7ed3\u70b9\uff0c4-\u7ed3\u70b9\u7684\u5de6\u952e\u4f5c\u4e3a\u7236\u7ed3\u70b9\u7684\u4e2d\u5b50\u6811\uff0c4-\u7ed3\u70b9\u7684\u53f3\u952e\u4f5c\u4e3a\u7236\u7ed3\u70b9\u7684\u53f3\u5b50\u6811</li> </ol> 3.13.23.3 <p></p> <p></p> <p></p>"},{"location":"tree/2_3_tree/#4-33","title":"4. \u5411\u4e00\u4e2a\u7236\u7ed3\u70b9\u4e3a3\u7ed3\u70b9\u76843\u7ed3\u70b9\u4e2d\u63d2\u5165\u65b0\u952e","text":"<p>\u5411\u4e00\u4e2a\u7236\u7ed3\u70b9\u4e3a3\u7ed3\u70b9\u76843\u7ed3\u70b9\u4e2d\u63d2\u5165\u65b0\u952e</p> <ol> <li>\u63d2\u5165\u65b0\u952e\uff0c\u6682\u65f6\u4f7f\u5176\u4e3a4-\u7ed3\u70b9</li> <li>\u628a\u5f53\u524d4\u7ed3\u70b9(\u4e3a\u9632\u6df7\u6dc6\uff0c\u5047\u8bbe\u4e3a\\(n\\))\u7684\u4e2d\u95f4\u952e\u63d0\u5347\uff0c\u4e0e\u7236\u7ed3\u70b9(\u5047\u8bbe\u4e3a\\(p\\))\u7ec4\u62104-\u7ed3\u70b9\uff0c\\(n\\)\u7684\u5de6\u952e\u548c\u53f3\u952e\u4f5c\u4e3a\\(p\\)(4-\u7ed3\u70b9)\u7684\u5de61\u5b50\u6811\u548c\u5de62\u5b50\u6811\u3002</li> <li>\u5c06\\(p\\)\u7684\u4e2d\u95f4\u952e\u63d0\u5347\uff0c\u4e0e\u7956\u7236\u7ed3\u70b9\u7ec4\u62102-\u7ed3\u70b9\u62163-\u7ed3\u70b9(\u5411\u4e0a\u9012\u5f52\u7ee7\u7eed\u63d0\u5347\uff0c\u6b64\u4f8b\u5230\u6b64\u4e3a\u6b62)\uff0c\\(p\\)\u5de6\u952e\u4f5c\u4e3a\u7956\u7236\u7684\u4e2d\u5b50\u6811\uff0c\\(p\\)\u53f3\u952e\u4f5c\u4e3a\u7956\u7236\u7684\u53f3\u5b50\u6811\uff0c\u540c\u65f6\\(p\\)\u5de6\u952e\u4e0e\u5de61\u548c\u5de62\u7ec4\u6210<code>2-3\u6811</code>\uff0c\\(p\\)\u53f3\u952e\u4e0e\u53f31\u548c\u53f32\u7ec4\u6210<code>2-3\u6811</code>\u3002</li> </ol> 4.14.24.34.4 <p></p> <p></p> <p></p> <p></p>"},{"location":"tree/avl_tree/","title":"\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811<code>AVL\u6811</code>","text":""},{"location":"tree/avl_tree/#_1","title":"\u601d\u7ef4\u5bfc\u56fe","text":""},{"location":"tree/avl_tree/#_2","title":"\u7279\u6027","text":"<ul> <li>\u4e0d\u65ad\u6dfb\u52a0\u4e0e\u5220\u9664\u7ed3\u70b9\u540e\uff0cAVL \u6811\u4ecd\u7136\u4e0d\u4f1a\u53d1\u751f\u9000\u5316\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u80fd\u4fdd\u6301\u5728\\(O(\\log n)\\)</li> <li>\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\\(\\leq 1\\)\u7684\u4e8c\u53c9\u641c\u7d22\u6811</li> <li>\u901a\u8fc7\u65cb\u8f6c\u6062\u590d\u5e73\u8861</li> </ul>"},{"location":"tree/avl_tree/#_3","title":"\u65cb\u8f6c","text":""},{"location":"tree/avl_tree/#_4","title":"\u524d\u7f6e\u51fd\u6570","text":"\u6811\u8282\u70b9\u7c7b\u83b7\u53d6\u7ed3\u70b9\u9ad8\u5ea6\u66f4\u65b0\u7ed3\u70b9\u9ad8\u5ea6\u83b7\u53d6\u5e73\u8861\u56e0\u5b50 <pre><code>/* AVL \u6811\u7ed3\u70b9\u7c7b */\nclass TreeNode {\npublic int val;        // \u7ed3\u70b9\u503c\npublic int height;     // \u7ed3\u70b9\u9ad8\u5ea6\npublic TreeNode left;  // \u5de6\u5b50\u7ed3\u70b9\npublic TreeNode right; // \u53f3\u5b50\u7ed3\u70b9\npublic TreeNode(int x) { val = x; }\n}\n</code></pre> <pre><code>/* \u83b7\u53d6\u7ed3\u70b9\u9ad8\u5ea6 */\nint height(TreeNode node) {\n// \u7a7a\u7ed3\u70b9\u9ad8\u5ea6\u4e3a -1 \uff0c\u53f6\u7ed3\u70b9\u9ad8\u5ea6\u4e3a 0\nreturn node == null ? -1 : node.height;\n}\n</code></pre> <pre><code>/* \u66f4\u65b0\u7ed3\u70b9\u9ad8\u5ea6 */\nvoid updateHeight(TreeNode node) {\n// \u7ed3\u70b9\u9ad8\u5ea6\u7b49\u4e8e\u6700\u9ad8\u5b50\u6811\u9ad8\u5ea6 + 1\nnode.height = Math.max(height(node.left), height(node.right)) + 1;\n}\n</code></pre> <pre><code>/* \u83b7\u53d6\u5e73\u8861\u56e0\u5b50 */\nint balanceFactor(TreeNode node) {\n// \u7a7a\u7ed3\u70b9\u5e73\u8861\u56e0\u5b50\u4e3a 0\nif (node == null) return 0;\n// \u7ed3\u70b9\u5e73\u8861\u56e0\u5b50 = \u5de6\u5b50\u6811\u9ad8\u5ea6 - \u53f3\u5b50\u6811\u9ad8\u5ea6\nreturn height(node.left) - height(node.right);\n}\n</code></pre>"},{"location":"tree/avl_tree/#_5","title":"\u53f3\u65cb","text":"<p>\u53f3\u65cb</p> <p>\u5982\u679c\u5931\u8861\u7ed3\u70b9\u7684\u5b50\u6811\u5ea6\u4e3a1</p> 1.2.3.4. <p></p> <p></p> <p></p> <p></p> <p>\u5982\u679c\u5931\u8861\u7ed3\u70b9\u7684\u5b50\u6811\u5ea6\u4e3a2</p> <p></p> <pre><code>/* \u53f3\u65cb\u64cd\u4f5c */\nTreeNode rightRotate(TreeNode node) {\nTreeNode child = node.left;\nTreeNode grandChild = child.right;\n// \u4ee5 child \u4e3a\u539f\u70b9\uff0c\u5c06 node \u5411\u53f3\u65cb\u8f6c\nchild.right = node;\nnode.left = grandChild;\n// \u66f4\u65b0\u7ed3\u70b9\u9ad8\u5ea6\nupdateHeight(node);\nupdateHeight(child);\n// \u8fd4\u56de\u65cb\u8f6c\u540e\u5b50\u6811\u7684\u6839\u7ed3\u70b9\nreturn child;\n}\n</code></pre>"},{"location":"tree/avl_tree/#_6","title":"\u5de6\u65cb","text":"<p>\u5de6\u65cb</p> <p>\u5982\u679c\u5931\u8861\u7ed3\u70b9\u7684\u5b50\u6811\u5ea6\u4e3a1</p> <p></p> <p>\u5982\u679c\u5931\u8861\u7ed3\u70b9\u7684\u5b50\u6811\u5ea6\u4e3a2</p> <p></p> <p>\u89c2\u5bdf\u53d1\u73b0\uff0c\u300c\u5de6\u65cb\u300d\u548c\u300c\u53f3\u65cb\u300d\u64cd\u4f5c\u662f\u955c\u50cf\u5bf9\u79f0\u7684\uff0c\u4e24\u8005\u5bf9\u5e94\u89e3\u51b3\u7684\u4e24\u79cd\u5931\u8861\u60c5\u51b5\u4e5f\u662f\u5bf9\u79f0\u7684\u3002\u6839\u636e\u5bf9\u79f0\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u4ece\u300c\u53f3\u65cb\u300d\u63a8\u5bfc\u51fa\u300c\u5de6\u65cb\u300d\u3002\u5177\u4f53\u5730\uff0c\u53ea\u9700\u5c06\u300c\u53f3\u65cb\u300d\u4ee3\u7801\u4e2d\u7684\u628a\u6240\u6709\u7684 left \u66ff\u6362\u4e3a right \u3001\u6240\u6709\u7684 right \u66ff\u6362\u4e3a left \uff0c\u5373\u53ef\u5f97\u5230\u300c\u5de6\u65cb\u300d\u4ee3\u7801\u3002</p> <pre><code>/* \u5de6\u65cb\u64cd\u4f5c */\nTreeNode leftRotate(TreeNode node) {\nTreeNode child = node.right;\nTreeNode grandChild = child.left;\n// \u4ee5 child \u4e3a\u539f\u70b9\uff0c\u5c06 node \u5411\u5de6\u65cb\u8f6c\nchild.left = node;\nnode.right = grandChild;\n// \u66f4\u65b0\u7ed3\u70b9\u9ad8\u5ea6\nupdateHeight(node);\nupdateHeight(child);\n// \u8fd4\u56de\u65cb\u8f6c\u540e\u5b50\u6811\u7684\u6839\u7ed3\u70b9\nreturn child;\n}\n</code></pre>"},{"location":"tree/avl_tree/#_7","title":"\u5148\u5de6\u540e\u53f3","text":"<p>\u5148\u5de6\u540e\u53f3</p> <p>\u5355\u4e00\u4f7f\u7528\u5de6\u65cb\u6216\u53f3\u65cb\u90fd\u65e0\u6cd5\u4f7f\u5b50\u6811\u6062\u590d\u5e73\u8861\uff0c\u6b64\u65f6\u9700\u8981\u300c\u5148\u5de6\u65cb\u540e\u53f3\u65cb\u300d</p> <p></p>"},{"location":"tree/avl_tree/#_8","title":"\u5148\u53f3\u540e\u5de6","text":"<p>\u5148\u53f3\u540e\u5de6</p> <p>\u300c\u5148\u53f3\u65cb\u540e\u5de6\u65cb\u300d</p> <p></p>"},{"location":"tree/avl_tree/#_9","title":"\u65cb\u8f6c\u7684\u9009\u62e9","text":"<p>\u65cb\u8f6c\u7684\u9009\u62e9</p> <p></p> <ul> <li>\u5931\u8861\u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50\uff1anode</li> <li>\u5b50\u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50\uff1achild</li> </ul> \u5931\u8861\u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50 \u5b50\u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50 \u5e94\u91c7\u7528\u7684\u65cb\u8f6c\u65b9\u6cd5 \\(&gt;0\\) \uff08\u5373\u5de6\u504f\u6811\uff09 \\(\\geq 0\\) \u53f3\u65cb \\(&gt;0\\) \uff08\u5373\u5de6\u504f\u6811\uff09 \\(&lt;0\\) \u5148\u5de6\u65cb\u540e\u53f3\u65cb \\(&lt;0\\) \uff08\u5373\u53f3\u504f\u6811\uff09 \\(\\leq 0\\) \u5de6\u65cb \\(&lt;0\\) \uff08\u5373\u53f3\u504f\u6811\uff09 \\(&gt;0\\) \u5148\u53f3\u65cb\u540e\u5de6\u65cb <pre><code>/* \u6267\u884c\u65cb\u8f6c\u64cd\u4f5c\uff0c\u4f7f\u8be5\u5b50\u6811\u91cd\u65b0\u6062\u590d\u5e73\u8861 */\nTreeNode rotate(TreeNode node) {\n// \u83b7\u53d6\u7ed3\u70b9 node \u7684\u5e73\u8861\u56e0\u5b50\nint balanceFactor = balanceFactor(node);\n// \u5de6\u504f\u6811\nif (balanceFactor &gt; 1) {\nif (balanceFactor(node.left) &gt;= 0) {\n// \u53f3\u65cb\nreturn rightRotate(node);\n} else {\n// \u5148\u5de6\u65cb\u540e\u53f3\u65cb\nnode.left = leftRotate(node.left);\nreturn rightRotate(node);\n}\n}\n// \u53f3\u504f\u6811\nif (balanceFactor &lt; -1) {\nif (balanceFactor(node.right) &lt;= 0) {\n// \u5de6\u65cb\nreturn leftRotate(node);\n} else {\n// \u5148\u53f3\u65cb\u540e\u5de6\u65cb\nnode.right = rightRotate(node.right);\nreturn leftRotate(node);\n}\n}\n// \u5e73\u8861\u6811\uff0c\u65e0\u9700\u65cb\u8f6c\uff0c\u76f4\u63a5\u8fd4\u56de\nreturn node;\n}\n</code></pre>"},{"location":"tree/avl_tree/#_10","title":"\u5e38\u7528\u64cd\u4f5c","text":""},{"location":"tree/avl_tree/#_11","title":"\u63d2\u5165\u7ed3\u70b9","text":"<p>\u63d2\u5165\u7ed3\u70b9\u540e\uff0c\u4ece\u8be5\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u4f1a\u51fa\u73b0\u4e00\u7cfb\u5217\u300c\u5931\u8861\u7ed3\u70b9\u300d\u3002\u6240\u4ee5\uff0c\u9700\u8981\u4ece\u8be5\u7ed3\u70b9\u5f00\u59cb\uff0c\u4ece\u5e95\u81f3\u9876\u5730\u6267\u884c\u65cb\u8f6c\u64cd\u4f5c\uff0c\u4f7f\u6240\u6709\u5931\u8861\u7ed3\u70b9\u6062\u590d\u5e73\u8861\u3002</p> <p>\u901a\u8fc7\u9012\u5f52\u627e\u5230\u7b26\u5408\u63d2\u5165\u6761\u4ef6\u7684\u7ed3\u70b9\uff0c\u521b\u5efa<code>new TreeNode(val)</code>\u540e\u5f00\u59cb\u56de\u6eaf\uff0c\u56de\u6eaf\u8fc7\u7a0b\u9014\u5f84\u7684\u7ed3\u70b9\u4f1a\u66f4\u65b0\u7ed3\u70b9\u9ad8\u5ea6\uff0c\u5982\u679c\u5e73\u8861\u56e0\u5b50\u51fa\u73b0\u95ee\u9898\u4f1a\u8fdb\u884c\u65cb\u8f6c\uff0c\u76f4\u5230\u56de\u6eaf\u5230\u6839\u7ed3\u70b9\u4e3a\u6b62\uff0c\u6b64\u65f6\u6574\u4e2a\u6811\u6062\u590d\u5e73\u8861\u3002</p> <pre><code>/* \u63d2\u5165\u7ed3\u70b9 */\nTreeNode insert(int val) {\nroot = insertHelper(root, val);\nreturn root;\n}\n\n/* \u9012\u5f52\u63d2\u5165\u7ed3\u70b9\uff08\u8f85\u52a9\u65b9\u6cd5\uff09 */\nTreeNode insertHelper(TreeNode node, int val) {\nif (node == null) return new TreeNode(val);\n/* 1. \u67e5\u627e\u63d2\u5165\u4f4d\u7f6e\uff0c\u5e76\u63d2\u5165\u7ed3\u70b9 */\nif (val &lt; node.val)\nnode.left = insertHelper(node.left, val);\nelse if (val &gt; node.val)\nnode.right = insertHelper(node.right, val);\nelse\nreturn node;     // \u91cd\u590d\u7ed3\u70b9\u4e0d\u63d2\u5165\uff0c\u76f4\u63a5\u8fd4\u56de\nupdateHeight(node);  // \u66f4\u65b0\u7ed3\u70b9\u9ad8\u5ea6\n/* 2. \u6267\u884c\u65cb\u8f6c\u64cd\u4f5c\uff0c\u4f7f\u8be5\u5b50\u6811\u91cd\u65b0\u6062\u590d\u5e73\u8861 */\nnode = rotate(node);\n// \u8fd4\u56de\u5b50\u6811\u7684\u6839\u7ed3\u70b9\nreturn node;\n}\n</code></pre>"},{"location":"tree/avl_tree/#_12","title":"\u5220\u9664\u7ed3\u70b9","text":"<p>\u300cAVL \u6811\u300d\u5220\u9664\u7ed3\u70b9\u64cd\u4f5c\u4e0e\u300c\u4e8c\u53c9\u641c\u7d22\u6811\u300d\u5220\u9664\u7ed3\u70b9\u64cd\u4f5c\u603b\u4f53\u76f8\u540c\u3002\u7c7b\u4f3c\u5730\uff0c\u5728\u5220\u9664\u7ed3\u70b9\u540e\uff0c\u4e5f\u9700\u8981\u4ece\u5e95\u81f3\u9876\u5730\u6267\u884c\u65cb\u8f6c\u64cd\u4f5c\uff0c\u4f7f\u6240\u6709\u5931\u8861\u7ed3\u70b9\u6062\u590d\u5e73\u8861\u3002</p> <pre><code>/* \u5220\u9664\u7ed3\u70b9 */\nTreeNode remove(int val) {\nroot = removeHelper(root, val);\nreturn root;\n}\n\n/* \u9012\u5f52\u5220\u9664\u7ed3\u70b9\uff08\u8f85\u52a9\u65b9\u6cd5\uff09 */\nTreeNode removeHelper(TreeNode node, int val) {\nif (node == null) return null;\n/* 1. \u67e5\u627e\u7ed3\u70b9\uff0c\u5e76\u5220\u9664\u4e4b */\nif (val &lt; node.val)\nnode.left = removeHelper(node.left, val);\nelse if (val &gt; node.val)\nnode.right = removeHelper(node.right, val);\nelse {\nif (node.left == null || node.right == null) {\nTreeNode child = node.left != null ? node.left : node.right;\n// \u5b50\u7ed3\u70b9\u6570\u91cf = 0 \uff0c\u76f4\u63a5\u5220\u9664 node \u5e76\u8fd4\u56de\nif (child == null)\nreturn null;\n// \u5b50\u7ed3\u70b9\u6570\u91cf = 1 \uff0c\u76f4\u63a5\u5220\u9664 node\nelse\nnode = child;\n} else {\n// \u5b50\u7ed3\u70b9\u6570\u91cf = 2 \uff0c\u5219\u5c06\u4e2d\u5e8f\u904d\u5386\u7684\u4e0b\u4e2a\u7ed3\u70b9\u5220\u9664\uff0c\u5e76\u7528\u8be5\u7ed3\u70b9\u66ff\u6362\u5f53\u524d\u7ed3\u70b9\nTreeNode temp = getInOrderNext(node.right);\nnode.right = removeHelper(node.right, temp.val);\nnode.val = temp.val;\n}\n}\nupdateHeight(node);  // \u66f4\u65b0\u7ed3\u70b9\u9ad8\u5ea6\n/* 2. \u6267\u884c\u65cb\u8f6c\u64cd\u4f5c\uff0c\u4f7f\u8be5\u5b50\u6811\u91cd\u65b0\u6062\u590d\u5e73\u8861 */\nnode = rotate(node);\n// \u8fd4\u56de\u5b50\u6811\u7684\u6839\u7ed3\u70b9\nreturn node;\n}\n\n/* \u83b7\u53d6\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff08\u4ec5\u9002\u7528\u4e8e root \u6709\u5de6\u5b50\u7ed3\u70b9\u7684\u60c5\u51b5\uff09 */\nTreeNode getInOrderNext(TreeNode node) {\nif (node == null) return node;\n// \u5faa\u73af\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u76f4\u5230\u53f6\u7ed3\u70b9\u65f6\u4e3a\u6700\u5c0f\u7ed3\u70b9\uff0c\u8df3\u51fa\nwhile (node.left != null) {\nnode = node.left;\n}\nreturn node;\n}\n</code></pre>"},{"location":"tree/avl_tree/#_13","title":"\u67e5\u627e\u7ed3\u70b9","text":"<p>\u4e0e\u4e8c\u53c9\u641c\u7d22\u6811\u4e00\u81f4</p> <pre><code>/* \u67e5\u627e\u7ed3\u70b9 */\nTreeNode search(int num) {\nTreeNode cur = root;\n// \u5faa\u73af\u67e5\u627e\uff0c\u8d8a\u8fc7\u53f6\u7ed3\u70b9\u540e\u8df3\u51fa\nwhile (cur != null) {\n// \u76ee\u6807\u7ed3\u70b9\u5728 cur \u7684\u53f3\u5b50\u6811\u4e2d\nif (cur.val &lt; num) cur = cur.right;\n// \u76ee\u6807\u7ed3\u70b9\u5728 cur \u7684\u5de6\u5b50\u6811\u4e2d\nelse if (cur.val &gt; num) cur = cur.left;\n// \u627e\u5230\u76ee\u6807\u7ed3\u70b9\uff0c\u8df3\u51fa\u5faa\u73af\nelse break;\n}\n// \u8fd4\u56de\u76ee\u6807\u7ed3\u70b9\nreturn cur;\n}\n</code></pre>"},{"location":"tree/avl_tree/#_14","title":"\u5e38\u89c1\u5e94\u7528","text":"<ul> <li>\u7ec4\u7ec7\u5b58\u50a8\u5927\u578b\u6570\u636e\uff0c\u9002\u7528\u4e8e\u9ad8\u9891\u67e5\u627e\u3001\u4f4e\u9891\u589e\u5220\u573a\u666f\uff1b</li> <li>\u7528\u4e8e\u5efa\u7acb\u6570\u636e\u5e93\u4e2d\u7684\u7d22\u5f15\u7cfb\u7edf\uff1b</li> </ul> <p>\u4e3a\u4ec0\u4e48\u7ea2\u9ed1\u6811\u6bd4 AVL \u6811\u66f4\u53d7\u6b22\u8fce\uff1f</p> <p>\u7ea2\u9ed1\u6811\u7684\u5e73\u8861\u6761\u4ef6\u76f8\u5bf9\u5bbd\u677e\uff0c\u56e0\u6b64\u5728\u7ea2\u9ed1\u6811\u4e2d\u63d2\u5165\u4e0e\u5220\u9664\u7ed3\u70b9\u6240\u9700\u7684\u65cb\u8f6c\u64cd\u4f5c\u76f8\u5bf9\u66f4\u5c11\uff0c\u7ed3\u70b9\u589e\u5220\u64cd\u4f5c\u76f8\u6bd4 AVL \u6811\u7684\u6548\u7387\u66f4\u9ad8\u3002</p>"},{"location":"tree/avl_tree/#leetcode","title":"<code>leetcode</code>","text":"<p>1382. \u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u53d8\u5e73\u8861</p> <p>\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u4f60\u8fd4\u56de\u4e00\u68f5\u00a0\u5e73\u8861\u540e\u00a0\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u65b0\u751f\u6210\u7684\u6811\u5e94\u8be5\u4e0e\u539f\u6765\u7684\u6811\u6709\u7740\u76f8\u540c\u7684\u8282\u70b9\u503c\u3002\u5982\u679c\u6709\u591a\u79cd\u6784\u9020\u65b9\u6cd5\uff0c\u8bf7\u4f60\u8fd4\u56de\u4efb\u610f\u4e00\u79cd\u3002</p> <p>\u5982\u679c\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u4e24\u68f5\u5b50\u6811\u9ad8\u5ea6\u5dee\u4e0d\u8d85\u8fc7 <code>1</code> \uff0c\u6211\u4eec\u5c31\u79f0\u8fd9\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u00a0\u5e73\u8861\u7684 \u3002</p> <p>\u672c\u5730\u6700\u4f18\u89e3\u662f\u5148\u7528\u4e2d\u5e8f\u904d\u5386\u628a\u4e8c\u53c9\u6811\u8f6c\u6362\u4e3a\u6709\u5e8f\u6570\u7ec4\uff0c\u7136\u540e\u6784\u9020\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u719f\u6089\u65cb\u8f6c\uff0c\u672c\u9898\u4f7f\u7528\u624b\u6495\u65b9\u5f0f\u3002</p> <pre><code>class Solution {\npublic TreeNode balanceBST(TreeNode root) {\nif (root == null){\nreturn null;\n}\n// node\u8282\u70b9\u7684\u9ad8\u5ea6\u7f13\u5b58\nMap&lt;TreeNode,Integer&gt; nodeHeight = new HashMap&lt;&gt;();\nTreeNode newRoot = null;\nDeque&lt;TreeNode&gt; stack = new LinkedList&lt;&gt;();\nTreeNode node = root;\n// \u5148\u5e8f\u904d\u5386\u63d2\u5165\uff08\u5176\u5b9e\u7528\u54ea\u4e2a\u904d\u5386\u90fd\u884c\uff09\nwhile(node != null || !stack.isEmpty()){\nif (node != null){\n// \u65b0\u6811\u63d2\u5165\nnewRoot = insert(newRoot,node.val,nodeHeight);\nstack.push(node);\nnode = node.left;\n}else {\nnode = stack.pop();\nnode = node.right;\n}\n}\nreturn newRoot;\n}\n\n/**\n        * \u65b0\u8282\u70b9\u63d2\u5165\n        * @param root root\n        * @param val \u65b0\u52a0\u5165\u7684\u503c\n        * @param nodeHeight \u8282\u70b9\u9ad8\u5ea6\u7f13\u5b58\n        * @return \u65b0\u7684root\u8282\u70b9\n        */\nprivate TreeNode insert(TreeNode root,int val,Map&lt;TreeNode,Integer&gt; nodeHeight){\nif (root == null){\nroot = new TreeNode(val);\nnodeHeight.put(root,1);// \u65b0\u8282\u70b9\u7684\u9ad8\u5ea6\nreturn root;\n}\nTreeNode node = root;\nint cmp = val - node.val;\nif (cmp &lt; 0){\n// \u5de6\u5b50\u6811\u63d2\u5165\nnode.left = insert(root.left,val,nodeHeight);\n// \u5982\u679c\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\u8d85\u8fc71\uff0c\u8fdb\u884c\u65cb\u8f6c\u8c03\u6574\nif (nodeHeight.getOrDefault(node.left,0) - nodeHeight.getOrDefault(node.right,0) &gt; 1){\nif (val &gt; node.left.val){\n// \u63d2\u5165\u5728\u5de6\u5b69\u5b50\u53f3\u8fb9\uff0c\u5de6\u5b69\u5b50\u5148\u5de6\u65cb\nnode.left = rotateLeft(node.left,nodeHeight);\n}\n// \u8282\u70b9\u53f3\u65cb\nnode = rotateRight(node,nodeHeight);\n}\n}else if (cmp &gt; 0){\n// \u53f3\u5b50\u6811\u63d2\u5165\nnode.right = insert(root.right,val,nodeHeight);\n// \u5982\u679c\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\u8d85\u8fc71\uff0c\u8fdb\u884c\u65cb\u8f6c\u8c03\u6574\nif (nodeHeight.getOrDefault(node.right,0) - nodeHeight.getOrDefault(node.left,0) &gt; 1){\nif (val &lt; node.right.val){\n// \u63d2\u5165\u5728\u53f3\u5b69\u5b50\u5de6\u8fb9\uff0c\u53f3\u5b69\u5b50\u5148\u53f3\u65cb\nnode.right = rotateRight(node.right,nodeHeight);\n}\n// \u8282\u70b9\u5de6\u65cb\nnode = rotateLeft(node,nodeHeight);\n}\n}else {\n// \u4e00\u6837\u7684\u8282\u70b9\uff0c\u5565\u90fd\u6ca1\u53d1\u751f\nreturn node;\n}\n// \u83b7\u53d6\u5f53\u524d\u8282\u70b9\u65b0\u9ad8\u5ea6\nint height =  getCurNodeNewHeight(node,nodeHeight);\n// \u66f4\u65b0\u5f53\u524d\u8282\u70b9\u9ad8\u5ea6\nnodeHeight.put(node,height);\nreturn node;\n}\n\n/**\n        * node\u8282\u70b9\u5de6\u65cb\n        * @param node node\n        * @param nodeHeight node\u9ad8\u5ea6\u7f13\u5b58\n        * @return \u65cb\u8f6c\u540e\u7684\u5f53\u524d\u8282\u70b9\n        */\nprivate TreeNode rotateLeft(TreeNode node,Map&lt;TreeNode,Integer&gt; nodeHeight){\n// ---\u6307\u9488\u8c03\u6574\nTreeNode right = node.right;\nnode.right = right.left;\nright.left = node;\n// ---\u9ad8\u5ea6\u66f4\u65b0\n// \u5148\u66f4\u65b0node\u8282\u70b9\u7684\u9ad8\u5ea6\uff0c\u8fd9\u4e2a\u65f6\u5019node\u662fright\u8282\u70b9\u7684\u5de6\u5b69\u5b50\nint newNodeHeight = getCurNodeNewHeight(node,nodeHeight);\n// \u66f4\u65b0node\u8282\u70b9\u9ad8\u5ea6\nnodeHeight.put(node,newNodeHeight);\n// newNodeHeight\u662f\u73b0\u5728right\u8282\u70b9\u5de6\u5b50\u6811\u9ad8\u5ea6\uff0c\u539f\u7406\u4e00\u6837\uff0c\u53d6\u73b0\u5728right\u5de6\u53f3\u5b50\u6811\u6700\u5927\u9ad8\u5ea6+1\nint newRightHeight = Math.max(newNodeHeight,nodeHeight.getOrDefault(right.right,0)) + 1;\n// \u66f4\u65b0\u539fright\u8282\u70b9\u9ad8\u5ea6\nnodeHeight.put(right,newRightHeight);\nreturn right;\n}\n\n/**\n        * node\u8282\u70b9\u53f3\u65cb\n        * @param node node\n        * @param nodeHeight node\u9ad8\u5ea6\u7f13\u5b58\n        * @return \u65cb\u8f6c\u540e\u7684\u5f53\u524d\u8282\u70b9\n        */\nprivate TreeNode rotateRight(TreeNode node,Map&lt;TreeNode,Integer&gt; nodeHeight){\n// ---\u6307\u9488\u8c03\u6574\nTreeNode left = node.left;\nnode.left = left.right;\nleft.right = node;\n// ---\u9ad8\u5ea6\u66f4\u65b0\n// \u5148\u66f4\u65b0node\u8282\u70b9\u7684\u9ad8\u5ea6\uff0c\u8fd9\u4e2a\u65f6\u5019node\u662fright\u8282\u70b9\u7684\u5de6\u5b69\u5b50\nint newNodeHeight = getCurNodeNewHeight(node,nodeHeight);\n// \u66f4\u65b0node\u8282\u70b9\u9ad8\u5ea6\nnodeHeight.put(node,newNodeHeight);\n// newNodeHeight\u662f\u73b0\u5728left\u8282\u70b9\u53f3\u5b50\u6811\u9ad8\u5ea6\uff0c\u539f\u7406\u4e00\u6837\uff0c\u53d6\u73b0\u5728right\u5de6\u53f3\u5b50\u6811\u6700\u5927\u9ad8\u5ea6+1\nint newLeftHeight = Math.max(newNodeHeight,nodeHeight.getOrDefault(left.left,0)) + 1;\n// \u66f4\u65b0\u539fleft\u8282\u70b9\u9ad8\u5ea6\nnodeHeight.put(left,newLeftHeight);\nreturn left;\n}\n\n/**\n        * \u83b7\u53d6\u5f53\u524d\u8282\u70b9\u7684\u65b0\u9ad8\u5ea6\n        * @param node node\n        * @param nodeHeight node\u9ad8\u5ea6\u7f13\u5b58\n        * @return \u5f53\u524dnode\u7684\u65b0\u9ad8\u5ea6\n        */\nprivate int getCurNodeNewHeight(TreeNode node,Map&lt;TreeNode,Integer&gt; nodeHeight){\n// node\u8282\u70b9\u7684\u9ad8\u5ea6\uff0c\u4e3a\u73b0\u5728node\u5de6\u53f3\u5b50\u6811\u6700\u5927\u9ad8\u5ea6+1\nreturn Math.max(nodeHeight.getOrDefault(node.left,0),nodeHeight.getOrDefault(node.right,0)) + 1;\n}\n}\n</code></pre>"},{"location":"tree/binary_search_tree/","title":"\u4e8c\u53c9\u641c\u7d22\u6811<code>binary_search_tree</code>","text":""},{"location":"tree/binary_search_tree/#_1","title":"\u601d\u7ef4\u5bfc\u56fe","text":""},{"location":"tree/binary_search_tree/#_2","title":"\u7279\u6027","text":"<ul> <li>\u5bf9\u4e8e\u4efb\u4e00\u6839\u7ed3\u70b9\uff0c \u5de6\u5b50\u6811\u7684\u503c \\(&lt;\\) \u6839\u7ed3\u70b9\u7684\u503c \\(&lt;\\) \u53f3\u5b50\u6811\u7684\u503c</li> <li>\u4f7f\u7528\u4e2d\u5e8f\u904d\u5386\u53ef\u4ee5\u6309<code>\u5e8f</code>\u8f93\u51fa\u7ed3\u70b9</li> <li>\u67e5\u8be2\u3001\u63d2\u5165\u4e0e\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(\\log n)\\)</li> <li>\u52a8\u6001\u5730\u5728\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u63d2\u5165\u4e0e\u5220\u9664\u7ed3\u70b9\uff0c\u5219\u53ef\u80fd\u5bfc\u81f4\u4e8c\u53c9\u6811\u9000\u5316\u4e3a\u94fe\u8868\uff0c\u6b64\u65f6\u5404\u79cd\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u9000\u5316\u4e3a\\(O(N)\\)</li> </ul>"},{"location":"tree/binary_search_tree/#_3","title":"\u5e38\u7528\u64cd\u4f5c","text":""},{"location":"tree/binary_search_tree/#_4","title":"\u67e5\u8be2\u7ed3\u70b9","text":"<p>\u67e5\u8be2\u7ed3\u70b9</p> <p>\u7531\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u53ef\u4ee5\u63a8\u8bba\u5230\uff0c\u5047\u8bbe\u6839\u7ed3\u70b9\u4e3a<code>node</code>\uff0c\u503c\u4e3a\\(n\\)\uff0c\u76ee\u6807\u7ed3\u70b9\u4e3a\\(x\\)</p> <ul> <li>\\(x\\) \\(==\\) \\(n\\)\u3002\u627e\u5230\u7ed3\u70b9</li> <li>\\(x\\) \\(&lt;\\) \\(n\\)\u3002\u63a8\u6d4b\u76ee\u6807\u503c\u5e94\u8be5\u5728\u5de6\u8282\u70b9\u7ee7\u7eed\u627e\u3002</li> <li>\\(x\\) \\(&gt;\\) \\(n\\)\u3002\u63a8\u6d4b\u76ee\u6807\u503c\u5e94\u8be5\u5728\u53f3\u8282\u70b9\u7ee7\u7eed\u627e\u3002</li> <li>\u6b64\u65b9\u6cd5\u7c7b\u4f3c\u4e8e\u4e8c\u5206\u67e5\u627e <pre><code>/* \u67e5\u627e\u7ed3\u70b9 */\nTreeNode search(int num) {\nTreeNode cur = root;\n// \u5faa\u73af\u67e5\u627e\uff0c\u8d8a\u8fc7\u53f6\u7ed3\u70b9\u540e\u8df3\u51fa\nwhile (cur != null) {\n// \u76ee\u6807\u7ed3\u70b9\u5728 cur \u7684\u53f3\u5b50\u6811\u4e2d\nif (cur.val &lt; num) cur = cur.right;\n// \u76ee\u6807\u7ed3\u70b9\u5728 cur \u7684\u5de6\u5b50\u6811\u4e2d\nelse if (cur.val &gt; num) cur = cur.left;\n// \u627e\u5230\u76ee\u6807\u7ed3\u70b9\uff0c\u8df3\u51fa\u5faa\u73af\nelse break;\n}\n// \u8fd4\u56de\u76ee\u6807\u7ed3\u70b9\nreturn cur;\n}\n</code></pre></li> </ul>"},{"location":"tree/binary_search_tree/#_5","title":"\u63d2\u5165\u7ed3\u70b9","text":"<p>\u63d2\u5165\u7ed3\u70b9</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u5f85\u63d2\u5165\u5143\u7d20\\(n\\)\uff0c\u4e3a\u4e86\u4fdd\u6301 \u5de6\u5b50\u6811 \\(&lt;\\) \u6839\u7ed3\u70b9 \\(&lt;\\) \u53f3\u5b50\u6811\u7684\u6027\u8d28\uff0c\u5206\u4e24\u6b65\u64cd\u4f5c</p> <ul> <li>\u627e\u5230\u5bf9\u5e94\u7ed3\u70b9\u7684\u4f4d\u7f6e</li> <li>\u521d\u59cb\u5316\u8be5\u7ed3\u70b9\uff0c\u5e76\u63d2\u5165\u6539\u4f4d\u7f6e\uff08\u901a\u8fc7\u66f4\u6539\u5bf9\u5e94\u6839\u8282\u70b9\u7684\u6307\u9488\u6307\u5411\uff09</li> </ul> <pre><code>/* \u63d2\u5165\u7ed3\u70b9 */\nTreeNode insert(int num) {\n// \u82e5\u6811\u4e3a\u7a7a\uff0c\u76f4\u63a5\u63d0\u524d\u8fd4\u56de\nif (root == null) return null;\nTreeNode cur = root, pre = null;\n// \u5faa\u73af\u67e5\u627e\uff0c\u8d8a\u8fc7\u53f6\u7ed3\u70b9\u540e\u8df3\u51fa\nwhile (cur != null) {\n// \u627e\u5230\u91cd\u590d\u7ed3\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de\nif (cur.val == num) return null;\npre = cur;\n// \u63d2\u5165\u4f4d\u7f6e\u5728 cur \u7684\u53f3\u5b50\u6811\u4e2d\nif (cur.val &lt; num) cur = cur.right;\n// \u63d2\u5165\u4f4d\u7f6e\u5728 cur \u7684\u5de6\u5b50\u6811\u4e2d\nelse cur = cur.left;\n}\n// \u63d2\u5165\u7ed3\u70b9 val\nTreeNode node = new TreeNode(num);\nif (pre.val &lt; num) pre.right = node;\nelse pre.left = node;\nreturn node;\n}\n</code></pre>"},{"location":"tree/binary_search_tree/#_6","title":"\u5220\u9664\u7ed3\u70b9","text":"<p>\u5220\u9664\u7ed3\u70b9</p> <p>\u540c\u63d2\u5165\u7ed3\u70b9\uff0c\u9700\u4fdd\u6301 \u5de6\u5b50\u6811 \\(&lt;\\) \u6839\u7ed3\u70b9 \\(&lt;\\) \u53f3\u5b50\u6811\u7684\u6027\u8d28\uff0c \u5148\u901a\u8fc7\u67e5\u627e\u83b7\u53d6\u5f85\u5220\u9664\u7684\u7ed3\u70b9\uff0c\u901a\u8fc7\u5b50\u7ed3\u70b9\u6570\u91cf\u5220\u9664\u5206\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\uff1a</p> <ul> <li>\u5b50\u7ed3\u70b9\u6570\u91cf\\(=0\\)\uff1a\u8868\u660e\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u76f4\u63a5\u5220\u9664\u5373\u53ef</li> <li>\u5b50\u7ed3\u70b9\u6570\u91cf\\(=1\\)\uff1a\u7528\u5b50\u7ed3\u70b9\u66ff\u6362\u5f85\u5220\u9664\u7ed3\u70b9</li> <li>\u5b50\u7ed3\u70b9\u6570\u91cf\\(=2\\)\uff1a\u901a\u8fc7\u4e2d\u5e8f\u904d\u5386\u67e5\u627e\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u4e0b\u4e00\u7ed3\u70b9\uff0c\u66ff\u6362\u5f85\u5220\u9664\u7ed3\u70b9</li> </ul> <pre><code>/* \u5220\u9664\u7ed3\u70b9 */\nTreeNode remove(int num) {\n// \u82e5\u6811\u4e3a\u7a7a\uff0c\u76f4\u63a5\u63d0\u524d\u8fd4\u56de\nif (root == null) return null;\nTreeNode cur = root, pre = null;\n// \u5faa\u73af\u67e5\u627e\uff0c\u8d8a\u8fc7\u53f6\u7ed3\u70b9\u540e\u8df3\u51fa\nwhile (cur != null) {\n// \u627e\u5230\u5f85\u5220\u9664\u7ed3\u70b9\uff0c\u8df3\u51fa\u5faa\u73af\nif (cur.val == num) break;\npre = cur;\n// \u5f85\u5220\u9664\u7ed3\u70b9\u5728 cur \u7684\u53f3\u5b50\u6811\u4e2d\nif (cur.val &lt; num) cur = cur.right;\n// \u5f85\u5220\u9664\u7ed3\u70b9\u5728 cur \u7684\u5de6\u5b50\u6811\u4e2d\nelse cur = cur.left;\n}\n// \u82e5\u65e0\u5f85\u5220\u9664\u7ed3\u70b9\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\nif (cur == null) return null;\n// \u5b50\u7ed3\u70b9\u6570\u91cf = 0 or 1\nif (cur.left == null || cur.right == null) {\n// \u5f53\u5b50\u7ed3\u70b9\u6570\u91cf = 0 / 1 \u65f6\uff0c child = null / \u8be5\u5b50\u7ed3\u70b9\nTreeNode child = cur.left != null ? cur.left : cur.right;\n// \u5220\u9664\u7ed3\u70b9 cur\nif (pre.left == cur) pre.left = child;\nelse pre.right = child;\n}\n// \u5b50\u7ed3\u70b9\u6570\u91cf = 2\nelse {\n// \u83b7\u53d6\u4e2d\u5e8f\u904d\u5386\u4e2d cur \u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\nTreeNode nex = getInOrderNext(cur.right);\nint tmp = nex.val;\n// \u9012\u5f52\u5220\u9664\u7ed3\u70b9 nex\nremove(nex.val);\n// \u5c06 nex \u7684\u503c\u590d\u5236\u7ed9 cur\ncur.val = tmp;\n}\nreturn cur;\n}\n\n/* \u83b7\u53d6\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff08\u4ec5\u9002\u7528\u4e8e root \u6709\u5de6\u5b50\u7ed3\u70b9\u7684\u60c5\u51b5\uff09 */\nTreeNode getInOrderNext(TreeNode root) {\nif (root == null) return root;\n// \u5faa\u73af\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u76f4\u5230\u53f6\u7ed3\u70b9\u65f6\u4e3a\u6700\u5c0f\u7ed3\u70b9\uff0c\u8df3\u51fa\nwhile (root.left != null) {\nroot = root.left;\n}\nreturn root;\n}\n</code></pre>"},{"location":"tree/binary_search_tree/#_7","title":"\u5347\u5e8f\u904d\u5386","text":"<p>\u5347\u5e8f\u904d\u5386</p> <pre><code>void dfs(TreeNode root) {\nif(root == null) return;\ndfs(root.left); // \u5de6\nSystem.out.println(root.val); // \u6839\ndfs(root.right); // \u53f3\n}\n</code></pre>"},{"location":"tree/binary_search_tree/#_8","title":"\u964d\u5e8f\u904d\u5386","text":"<p>\u964d\u5e8f\u904d\u5386</p> <pre><code>void dfs(TreeNode root) {\nif(root == null) return;\ndfs(root.right); // \u53f3\nSystem.out.println(root.val); // \u6839\ndfs(root.left); // \u5de6\n}\n</code></pre>"},{"location":"tree/binary_search_tree/#_9","title":"\u5e38\u89c1\u5e94\u7528","text":"<ul> <li>\u7cfb\u7edf\u4e2d\u7684\u591a\u7ea7\u7d22\u5f15\uff0c\u9ad8\u6548\u67e5\u627e\u3001\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u3002</li> <li>\u5404\u79cd\u641c\u7d22\u7b97\u6cd5\u7684\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u3002</li> <li>\u5b58\u50a8\u6570\u636e\u6d41\uff0c\u4fdd\u6301\u5176\u5df2\u6392\u5e8f\u3002</li> </ul>"},{"location":"tree/binary_search_tree/#leetcode","title":"<code>leetcode</code>","text":""},{"location":"tree/binary_search_tree/#offer-54-k","title":"\u5251\u6307 Offer 54. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2ck\u5927\u8282\u70b9","text":"<p>\u5251\u6307 Offer 54. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2ck\u5927\u8282\u70b9</p> <p>\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u627e\u51fa\u5176\u4e2d\u7b2c k \u5927\u7684\u8282\u70b9\u7684\u503c\u3002</p> <pre><code>class Solution {\nint res, k;\npublic int kthLargest(TreeNode root, int k) {\nthis.k = k;\ndfs(root);\nreturn res;\n}\nvoid dfs(TreeNode root) {\nif(root == null) return;\ndfs(root.right);\nif(k == 0) return;\nif(--k == 0) res = root.val;\ndfs(root.left);\n}\n}\n</code></pre>"},{"location":"tree/binary_search_tree/#98","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p> <pre><code>class Solution {\nlong pre = Long.MIN_VALUE;\npublic boolean isValidBST(TreeNode root) {\nif (root == null) {\nreturn true;\n}\n// \u8bbf\u95ee\u5de6\u5b50\u6811\nif (!isValidBST(root.left)) {\nreturn false;\n}\n// \u8bbf\u95ee\u5f53\u524d\u8282\u70b9\uff1a\u5982\u679c\u5f53\u524d\u8282\u70b9\u5c0f\u4e8e\u7b49\u4e8e\u4e2d\u5e8f\u904d\u5386\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u8bf4\u660e\u4e0d\u6ee1\u8db3BST\uff0c\u8fd4\u56de false\uff1b\u5426\u5219\u7ee7\u7eed\u904d\u5386\u3002\nif (root.val &lt;= pre) {\nreturn false;\n}\npre = root.val;\n// \u8bbf\u95ee\u53f3\u5b50\u6811\nreturn isValidBST(root.right);\n}\n}\n</code></pre>"},{"location":"tree/binary_tree/","title":"\u4e8c\u53c9\u6811<code>binary_tree</code>","text":""},{"location":"tree/binary_tree/#_1","title":"\u601d\u7ef4\u5bfc\u56fe","text":""},{"location":"tree/binary_tree/#_2","title":"\u7279\u6027","text":"<ul> <li>\u975e\u7ebf\u6027</li> <li>\u4e00\u5206\u4e3a\u4e8c\u7684<code>\u5206\u6cbb\u903b\u8f91</code></li> <li>\u7ed3\u70b9\u5305\u542b\u4e00\u4e2a\u503c\u548c\u4e24\u4e2a\u6307\u9488</li> <li>\u6839\u7ed3\u70b9\uff1a\u4e8c\u53c9\u6811\u6700\u9876\u5c42\u7684\u7ed3\u70b9\uff0c\u5176\u6ca1\u6709\u7236\u7ed3\u70b9</li> <li>\u53f6\u7ed3\u70b9\uff1a\u6ca1\u6709\u5b50\u7ed3\u70b9\u7684\u7ed3\u70b9\uff0c\u4e24\u4e2a\u6307\u9488\u90fd\u6307\u5411<code>null</code></li> <li>\u5c42\uff1a\u4ece\u9876\u81f3\u4f4e\u9012\u589e\uff0c\u6839\u7ed3\u70b9\u4e3a1</li> <li>\u5ea6\uff1a\u7ed3\u70b9\u7684\u5b50\u7ed3\u70b9\u6570\u91cf\uff0c\u4e8c\u53c9\u6811\u4e2d\uff0c\u5ea6\u7684\u8303\u56f40\uff0c1\uff0c2</li> <li>\u8fb9\uff1a\u8fde\u63a5\u4e24\u4e2a\u7ed3\u70b9\u7684\u8fb9\uff0c\u5373\u6307\u9488</li> <li>\u4e8c\u53c9\u6811\u9ad8\u5ea6\uff1a\u6839\u7ed3\u70b9\u5230\u6700\u8fdc\u53f6\u7ed3\u70b9\u7ecf\u8fc7\u7684\u8fb9\u7684\u6570\u91cf</li> <li>\u7ed3\u70b9\u6df1\u5ea6\uff1a\u6839\u7ed3\u70b9\u5230\u6b64\u7ed3\u70b9\u7ecf\u8fc7\u7684\u8fb9\u7684\u6570\u91cf</li> <li>\u7ed3\u70b9\u9ad8\u5ea6\uff1a\u6b64\u7ed3\u70b9\u5230\u6700\u8fdc\u53f6\u7ed3\u70b9\u7ecf\u8fc7\u7684\u8fb9\u7684\u6570\u91cf</li> </ul>"},{"location":"tree/binary_tree/#_3","title":"\u5e38\u7528\u64cd\u4f5c","text":"<p>\u521d\u59cb\u5316</p> <pre><code>TreeNode n1 = new TreeNode(1);\nTreeNode n2 = new TreeNode(2);\nTreeNode n3 = new TreeNode(3);\n</code></pre> <p>\u6784\u5efa\u5f15\u7528</p> <pre><code>n1.left = n2;\nn1.right = n3;\nn2.left = n4;\nn2.right = n5;\n</code></pre> <p>\u63d2\u5165\u4e0e\u5220\u9664</p> <p><pre><code>```java\nTreeNode P = new TreeNode(0);\n// \u5728 n1 -&gt; n2 \u4e2d\u95f4\u63d2\u5165\u7ed3\u70b9 P\nn1.left = P;\nP.left = n2;\n// \u5220\u9664\u7ed3\u70b9 P\nn1.left = n2;\n</code></pre> </p>"},{"location":"tree/binary_tree/#_4","title":"\u5e38\u89c1\u4e8c\u53c9\u6811\u7c7b\u578b","text":"<p>\u5b8c\u7f8e\u4e8c\u53c9\u6811</p> <ul> <li>\u4e5f\u53eb\u6ee1\u4e8c\u53c9\u6811\uff0c\u6240\u6709\u5c42\u7684\u7ed3\u70b9\u90fd\u88ab\u5b8c\u5168\u586b\u6ee1\u3002</li> <li>\u6240\u6709\u7ed3\u70b9\u7684\u5ea6\u4e3a2</li> <li>\u82e5\u6811\u9ad8\u5ea6 \\(= h\\) \uff0c\u5219\u7ed3\u70b9\u603b\u6570 \\(= 2^{h+1} - 1\\)</li> <li><code>Perfect Binary Tree</code></li> </ul> <p></p> <p>\u5b8c\u5168\u4e8c\u53c9\u6811</p> <ul> <li>\u6700\u5e95\u5c42\u7684\u7ed3\u70b9\u672a\u88ab\u586b\u6ee1\uff0c\u4e14\u6700\u5e95\u5c42\u7ed3\u70b9\u5c3d\u91cf\u9760\u5de6\u586b\u5145</li> <li>\u5b8c\u5168\u4e8c\u53c9\u6811\u975e\u5e38\u9002\u5408\u7528\u6570\u7ec4\u6765\u8868\u793a:\u5982\u679c\u6309\u7167\u5c42\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u987a\u5e8f\u6765\u5b58\u50a8\uff0c\u90a3\u4e48\u7a7a\u7ed3\u70b9 null \u4e00\u5b9a\u5168\u90e8\u51fa\u73b0\u5728\u5e8f\u5217\u7684\u5c3e\u90e8\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u7528\u5b58\u50a8\u8fd9\u4e9b null \u4e86\u3002</li> </ul> <p></p> <p>\u5b8c\u6ee1\u4e8c\u53c9\u6811</p> <ul> <li>\u53f6\u7ed3\u70b9\u4e4b\u5916\uff0c\u5176\u4f59\u6240\u6709\u7ed3\u70b9\u90fd\u6709\u4e24\u4e2a\u5b50\u7ed3\u70b9</li> </ul> <p></p> <p>\u5e73\u8861\u4e8c\u53c9\u6811</p> <ul> <li>\u4efb\u610f\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c \\(\\leq 1\\)</li> </ul> <p></p>"},{"location":"tree/binary_tree/#_5","title":"\u4e8c\u53c9\u6811\u7684\u9000\u5316","text":"<p>\u5f53\u4e8c\u53c9\u6811\u7684\u6bcf\u5c42\u7684\u7ed3\u70b9\u90fd\u88ab\u586b\u6ee1\u65f6\uff0c\u8fbe\u5230\u300c\u5b8c\u7f8e\u4e8c\u53c9\u6811\u300d\uff1b\u800c\u5f53\u6240\u6709\u7ed3\u70b9\u90fd\u504f\u5411\u4e00\u8fb9\u65f6\uff0c\u4e8c\u53c9\u6811\u9000\u5316\u4e3a\u300c\u94fe\u8868\u300d\u3002</p> <ul> <li>\u5b8c\u7f8e\u4e8c\u53c9\u6811\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u201c\u6700\u4f73\u72b6\u6001\u201d\uff0c\u53ef\u4ee5\u5b8c\u5168\u53d1\u6325\u51fa\u4e8c\u53c9\u6811\u201c\u5206\u6cbb\u201d\u7684\u4f18\u52bf\uff1b</li> <li>\u94fe\u8868\u5219\u662f\u53e6\u4e00\u4e2a\u6781\u7aef\uff0c\u5404\u9879\u64cd\u4f5c\u90fd\u53d8\u4e3a\u7ebf\u6027\u64cd\u4f5c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u9000\u5316\u81f3 \\(O(n)\\)\uff1b</li> </ul> <p></p>"},{"location":"tree/binary_tree/#_6","title":"\u904d\u5386\u65b9\u5f0f","text":"<ul> <li>\u524d\u5e8f\u904d\u5386\uff08\u5148\u6839\uff0c\u518d\u5de6\uff0c\u6700\u540e\u53f3\uff09</li> <li>\u4e2d\u5e8f\u904d\u5386\uff08\u5148\u5de6\uff0c\u518d\u6839\uff0c\u6700\u540e\u53f3\uff09</li> <li>\u540e\u5e8f\u904d\u5386\uff08\u5148\u5de6\uff0c\u518d\u53f3\uff0c\u6700\u540e\u6839\uff09</li> </ul>"},{"location":"tree/binary_tree/#_7","title":"\u4e2d\u5e8f\u904d\u5386\u7b97\u6cd5\u5b9e\u73b0","text":"<p>\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 BFS</p> <pre><code>List&lt;Integer&gt; levelOrder(TreeNode root) {\n// \u521d\u59cb\u5316\u961f\u5217\uff0c\u52a0\u5165\u6839\u7ed3\u70b9\nQueue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;() {{ add(root); }};\n// \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u4e8e\u4fdd\u5b58\u904d\u5386\u5e8f\u5217\nList&lt;Integer&gt; list = new ArrayList&lt;&gt;();\nwhile (!queue.isEmpty()) {\nTreeNode node = queue.poll();  // \u961f\u5217\u51fa\u961f\nlist.add(node.val);            // \u4fdd\u5b58\u7ed3\u70b9\u503c\nif (node.left != null)\nqueue.offer(node.left);    // \u5de6\u5b50\u7ed3\u70b9\u5165\u961f\nif (node.right != null)\nqueue.offer(node.right);   // \u53f3\u5b50\u7ed3\u70b9\u5165\u961f\n}\nreturn list;\n}\n</code></pre> <p>\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 DFS</p> <pre><code>class Solution {\npublic List&lt;Integer&gt; inorderTraversal(TreeNode root) {\nList&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();\ninorder(root, res);\nreturn res;\n}\n\npublic void inorder(TreeNode root, List&lt;Integer&gt; res) {\nif (root == null) {\nreturn;\n}\ninorder(root.left, res);\nres.add(root.val);\ninorder(root.right, res);\n}\n}\n</code></pre>"},{"location":"tree/binary_tree/#leetcode","title":"<code>leetcode</code>","text":""},{"location":"tree/binary_tree/#offer-32-i","title":"\u5251\u6307 Offer 32 - I. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811","text":"<p>\u5251\u6307 Offer 32 - I. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811</p> <p>\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u540c\u4e00\u5c42\u7684\u7ed3\u70b9\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\u3002</p> <pre><code>3\n/ \\\n9  20\n/  \\\n15   7\n</code></pre> <p>\u8fd4\u56de\uff1a</p> <pre><code>[3,9,20,15,7]\n</code></pre> <pre><code>class Solution {\npublic int[] levelOrder(TreeNode root) {\nif(root == null) return new int[0];\nQueue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(){{ add(root); }};\nArrayList&lt;Integer&gt; ans = new ArrayList&lt;&gt;();\nwhile(!queue.isEmpty()) {\nTreeNode node = queue.poll();\nans.add(node.val);\nif(node.left != null) queue.add(node.left);\nif(node.right != null) queue.add(node.right);\n}\nint[] res = new int[ans.size()];\nfor(int i = 0; i &lt; ans.size(); i++)\nres[i] = ans.get(i);\nreturn res;\n}\n}\n</code></pre>"},{"location":"tree/binary_tree/#offer-32-ii-ii","title":"\u5251\u6307 Offer 32 - II. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 II","text":"<p>\u5251\u6307 Offer 32 - II. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 II<p>\u4ece\u4e0a\u5230\u4e0b\u6309\u5c42\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u540c\u4e00\u5c42\u7684\u7ed3\u70b9\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u6bcf\u4e00\u5c42\u6253\u5370\u5230\u4e00\u884c\u3002</p> <p>\u4f8b\u5982: \u7ed9\u5b9a\u4e8c\u53c9\u6811: [3,9,20,null,null,15,7],</p> <p><pre><code>3\n/ \\\n9  20\n/  \\\n15   7\n</code></pre> \u8fd4\u56de\u5176\u5c42\u6b21\u904d\u5386\u7ed3\u679c\uff1a</p> <pre><code>[\n    [3],\n    [9,20],\n    [15,7]\n]\n</code></pre> <pre><code>class Solution {\npublic List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {\nQueue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();\nList&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\nif(root != null) queue.add(root);\nwhile(!queue.isEmpty()) {\nList&lt;Integer&gt; tmp = new ArrayList&lt;&gt;();\nfor(int i = queue.size(); i &gt; 0; i--) {\nTreeNode node = queue.poll();\ntmp.add(node.val);\nif(node.left != null) queue.add(node.left);\nif(node.right != null) queue.add(node.right);\n}\nres.add(tmp);\n}\nreturn res;\n}\n}\n</code></pre> </p>"},{"location":"tree/binary_tree/#offer-32-iii-iii","title":"\u5251\u6307 Offer 32 - III. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 III","text":"<p>\u5251\u6307 Offer 32 - III. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 III</p> <p>\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6309\u7167\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u5373\u7b2c\u4e00\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e8c\u5c42\u6309\u7167\u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e09\u884c\u518d\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u5176\u4ed6\u884c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> <p>\u4f8b\u5982: \u7ed9\u5b9a\u4e8c\u53c9\u6811: [3,9,20,null,null,15,7],</p> <p><pre><code>3\n/ \\\n9  20\n/  \\\n15   7\n</code></pre> \u8fd4\u56de\u5176\u5c42\u6b21\u904d\u5386\u7ed3\u679c\uff1a <pre><code>[\n    [3],\n    [20,9],\n    [15,7]\n]\n</code></pre></p> <pre><code>class Solution {\npublic List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {\nQueue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();\nList&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\nif(root != null) queue.add(root);\nwhile(!queue.isEmpty()) {\nList&lt;Integer&gt; tmp = new ArrayList&lt;&gt;();\nfor(int i = queue.size(); i &gt; 0; i--) {\nTreeNode node = queue.poll();\ntmp.add(node.val);\nif(node.left != null) queue.add(node.left);\nif(node.right != null) queue.add(node.right);\n}\nif(res.size() % 2 == 1) Collections.reverse(tmp);\nres.add(tmp);\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"tree/binary_tree/#offer-27","title":"\u5251\u6307 Offer 27. \u4e8c\u53c9\u6811\u7684\u955c\u50cf","text":"<p>\u5251\u6307 Offer 27. \u4e8c\u53c9\u6811\u7684\u955c\u50cf</p> <p>\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8be5\u51fd\u6570\u8f93\u51fa\u5b83\u7684\u955c\u50cf\u3002</p> <p>\u4f8b\u5982\u8f93\u5165\uff1a</p> <p><pre><code>      4\n    /   \\\n   2     7\n  / \\   / \\\n 1   3 6   9\n</code></pre> \u955c\u50cf\u8f93\u51fa\uff1a</p> <pre><code>      4\n    /   \\\n   7     2\n  / \\   / \\\n 9   6 3   1\n</code></pre> <pre><code>class Solution {\npublic TreeNode mirrorTree(TreeNode root) {\nif(root == null) return null;\nTreeNode tmp = root.left;\nroot.left = mirrorTree(root.right);\nroot.right = mirrorTree(tmp);\nreturn root;\n}\n}\n</code></pre>"},{"location":"tree/binary_tree/#_8","title":"\u4e8c\u53c9\u6811\u9898\u76ee\u603b\u7ed3","text":""},{"location":"tree/red_black_tree/","title":"\u7ea2\u9ed1\u6811","text":""},{"location":"tree/red_black_tree/#_2","title":"\u601d\u7ef4\u5bfc\u56fe","text":""},{"location":"tree/red_black_tree/#_3","title":"\u7279\u6027","text":"<ul> <li>\u4e8c\u53c9\u641c\u7d22\u6811</li> <li>\u589e\u52a0\u4e00\u4e2a\u5b58\u50a8\u4f4d\u8868\u793a\u7ed3\u70b9\u989c\u8272</li> <li>\u6ca1\u6709\u4e00\u4e2a\u8def\u5f84\u4f1a\u6bd4\u5176\u4ed6\u8def\u5f84\u957f2\u500d\uff0c\u56e0\u800c\u662f\u8fd1\u4f3c\u4e8e\u5e73\u8861\u7684</li> <li>\u4ece\u67d0\u4e2a\u7ed3\u70b9\u51fa\u53d1\uff08\u4e0d\u542b\u8be5\u7ed3\u70b9\uff09\u5230\u8fbe\u4e00\u4e2a\u53f6\u7ed3\u70b9\u7684\u4efb\u610f\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u9ed1\u8272\u7ed3\u70b9\u4e2a\u6570\u79f0\u4e3a\u8be5\u7ed3\u70b9\u7684\u9ed1\u9ad8</li> <li>\u7ea2\u9ed1\u6811\u7684\u9ed1\u9ad8\u7b49\u4e8e\u5176\u6839\u7ed3\u70b9\u7684\u9ed1\u9ad8</li> <li>\u4e00\u9897\u6709\\(n\\)\u4e2a\u5185\u90e8\u7ed3\u70b9\u7684\u7ea2\u9ed1\u6811\u7684\u9ad8\u5ea6\u81f3\u591a\u4e3a \\(2\\lg (n+1)\\)</li> <li>\u589e\u5220\u67e5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(\\lg(n))\\)</li> <li>\u65b0\u63d2\u5165\u7684\u7ed3\u70b9\u662f\u7ea2\u8272</li> </ul>"},{"location":"tree/red_black_tree/#_4","title":"\u7ea2\u9ed1\u6811\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6","text":"<ol> <li>\u6bcf\u4e2a\u7ed3\u70b9\u6216\u662f\u7ea2\u8272\u7684\uff0c\u6216\u662f\u9ed1\u8272\u7684</li> <li>\u6839\u7ed3\u70b9\u662f\u9ed1\u8272\u7684</li> <li>\u6bcf\u4e2a\u53f6\u7ed3\u70b9\u662f\u9ed1\u8272\u7684</li> <li>\u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u662f\u7ea2\u8272\u7684\uff0c\u5219\u5b83\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u90fd\u662f\u9ed1\u8272\u7684</li> <li>\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u4ece\u8be5\u7ed3\u70b9\u5230\u5176\u6240\u6709\u540e\u4ee3\u53f6\u7ed3\u70b9\u7684\u7b80\u5355\u8def\u5f84\u4e0a\uff0c\u5747\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u8272\u7ed3\u70b9</li> </ol>"},{"location":"tree/red_black_tree/#_5","title":"\u5e38\u89c1\u5e94\u7528","text":"<ul> <li><code>TreeMap</code> \u548c <code>TreeSet</code> \u90fd\u662f\u57fa\u4e8e\u7ea2\u9ed1\u6811\u5b9e\u73b0\u7684</li> <li><code>JDK8</code> \u4e2d <code>HashMap</code> \u5f53\u94fe\u8868\u957f\u5ea6\u5927\u4e8e 8 \u65f6\u4f1a\u8f6c\u5316\u4e3a\u7ea2\u9ed1\u6811</li> </ul>"},{"location":"tree/red_black_tree/#_6","title":"\u5e38\u7528\u64cd\u4f5c","text":""},{"location":"tree/red_black_tree/#_7","title":"\u63d2\u5165","text":""},{"location":"tree/red_black_tree/#1","title":"1. \u63d2\u5165\u6839\u7ed3\u70b9","text":"<p>\u63d2\u5165\u7684\u65b0\u7ed3\u70b9 N \u662f\u7ea2\u9ed1\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u628a\u7ed3\u70b9 N \u7684\u989c\u8272\u7531\u7ea2\u8272\u53d8\u4e3a\u9ed1\u8272\uff0c\u6027\u8d282\uff08\u6839\u662f\u9ed1\u8272\uff09\u88ab\u6ee1\u8db3\u3002\u540c\u65f6 N \u88ab\u67d3\u6210\u9ed1\u8272\u540e\uff0c\u7ea2\u9ed1\u6811\u6240\u6709\u8def\u5f84\u4e0a\u7684\u9ed1\u8272\u7ed3\u70b9\u6570\u91cf\u589e\u52a0\u4e00\u4e2a\uff0c\u6027\u8d285\uff08\u4ece\u4efb\u4e00\u7ed3\u70b9\u5230\u5176\u6bcf\u4e2a\u53f6\u5b50\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\u90fd\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u8272\u7ed3\u70b9\uff09\u4ecd\u7136\u88ab\u6ee1\u8db3</p> <p></p>"},{"location":"tree/red_black_tree/#2","title":"2. \u7236\u7ed3\u70b9\u4e3a\u9ed1\u8272","text":"<p>N \u7684\u7236\u7ed3\u70b9\u662f\u9ed1\u8272\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6027\u8d284\uff08\u6bcf\u4e2a\u7ea2\u8272\u7ed3\u70b9\u5fc5\u987b\u6709\u4e24\u4e2a\u9ed1\u8272\u7684\u5b50\u7ed3\u70b9\uff09\u548c\u6027\u8d285\u6ca1\u6709\u53d7\u5230\u5f71\u54cd\uff0c\u4e0d\u9700\u8981\u8c03\u6574\u3002</p> <p></p>"},{"location":"tree/red_black_tree/#3","title":"3. \u5de6\u503e\u67d3\u8272","text":"<p>\u6761\u4ef6\uff1a\u65b0\u589e\u7ed3\u70b91\u7684\u53d4\u53d4\u7ed3\u70b94\u4e3a\u7ea2\u8272\u3002</p> <p>\u65b0\u589e\u7ed3\u70b91\uff0c\u76f8\u5f53\u4e8e2-3\u6811\u4e2d\u5728\u7ed3\u70b92\u4e0a\u6dfb\u52a0\u4e86\u4e00\u4e2a\u7ed3\u70b9\uff0c\u8fd9\u4e2a\u65f6\u5019\u5e76\u4e0d\u5f71\u54cd\u6811\u9ad8\uff0c\u53ea\u9700\u8981\u67d3\u8272\u4fdd\u6301\u7ea2\u9ed1\u6811\u7684\u89c4\u5219\u5373\u53ef\u3002</p> 3.13.23.3 <p></p> <p></p> <p></p>"},{"location":"tree/red_black_tree/#4","title":"4. \u53f3\u503e\u67d3\u8272","text":"<p>\u6761\u4ef6\uff1a\u65b0\u589e\u7ed3\u70b94\u7684\u53d4\u53d4\u7ed3\u70b91\u662f\u7ea2\u8272\u3002</p> <p>\u65b0\u589e\u7ed3\u70b94\uff0c\u76f8\u5f53\u4e8e2-3\u6811\u4e2d\u5728\u7ed3\u70b93\u4e0a\u6dfb\u52a0\u4e86\u4e00\u4e2a\u7ed3\u70b9\uff0c\u8fd9\u4e2a\u65f6\u5019\u5e76\u4e0d\u5f71\u54cd\u6811\u9ad8\uff0c\u53ea\u9700\u8981\u67d3\u8272\u4fdd\u6301\u7ea2\u9ed1\u6811\u7684\u89c4\u5219\u5373\u53ef\u3002</p> 4.14.24.3 <p></p> <p></p> <p></p>"},{"location":"tree/red_black_tree/#5","title":"5. \u5de6\u65cb\u8c03\u8861","text":"<p>\u6761\u4ef6\uff1a\u65b0\u589e\u7ed3\u70b9\u7684\u53d4\u53d4\u7ed3\u70b9\u4e0d\u662f\u7ea2\u8272</p> <p>\u5bf9\u71672-3\u6811\uff0c\u53ea\u6709\u5f53\u4e00\u4e2a\u7ed3\u70b9\u5185\u67093\u4e2a\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u624d\u9700\u8981\u8c03\u8861\u3002\u90a3\u4e48\u7ea2\u9ed1\u6811\u5219\u662f\u5224\u65ad\u5f53\u524d\u7ed3\u70b9\u7684\u53d4\u53d4\u7ed3\u70b9\u662f\u5426\u4e3a\u7ea2\u8272\u7ed3\u70b9\uff0c\u5982\u679c\u4e0d\u662f\u5219\u6ca1\u6cd5\u901a\u8fc7\u67d3\u8272\u8c03\u8861\uff0c\u4e5f\u5c31\u662f\u9700\u8981\u9009\u62e9\u8fdb\u884c\u8c03\u8861\u3002</p> <ul> <li> \u4e00\u6b21\u5de6\u65cb</li> </ul> 5.1.15.1.25.1.3 <p></p> <p></p> <p></p> <ul> <li> \u53f3\u65cb \\(+\\) \u5de6\u65cb</li> </ul> 5.2.15.2.25.2.35.2.4 <p></p> <p></p> <p></p> <p></p>"},{"location":"tree/red_black_tree/#6","title":"6. \u53f3\u65cb\u8c03\u8861","text":"<p>\u6761\u4ef6\uff1a\u65b0\u589e\u7ed3\u70b9\u7684\u53d4\u53d4\u7ed3\u70b9\u4e0d\u662f\u7ea2\u8272</p> <p>\u540c\u5de6\u65cb</p> <ul> <li> \u4e00\u6b21\u53f3\u65cb</li> </ul> 6.1.16.1.26.1.3 <p></p> <p></p> <p></p> <ul> <li> \u5de6\u65cb \\(+\\) \u53f3\u65cb</li> </ul> 6.2.16.2.26.2.36.2.4 <p></p> <p></p> <p></p> <p></p>"},{"location":"tree/red_black_tree/#_8","title":"\u5220\u9664","text":""},{"location":"tree/red_black_tree/#1_1","title":"1. \u5220\u9664\u6839\u7ed3\u70b9","text":"<p>\u5220\u9664\u7684\u662f\u6839\u7ed3\u70b9\uff0c\u5219\u76f4\u63a5\u5c06\u6839\u7ed3\u70b9\u7f6e\u4e3a <code>null</code></p> <p></p>"},{"location":"tree/red_black_tree/#2-null","title":"2. \u5de6\u53f3\u5b50\u7ed3\u70b9\u90fd\u4e3a<code>null</code>","text":"<p>\u5de6\u53f3\u5b50\u7ed3\u70b9\u90fd\u4e3a<code>null</code></p> 2.1.12.1.2 <p></p> <p></p>"},{"location":"tree/red_black_tree/#3_1","title":"3. \u5de6\u53f3\u5b50\u7ed3\u70b9\u6709\u4e00\u4e2a\u6709\u503c","text":"<p>\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\u6709\u4e00\u4e2a\u6709\u503c\uff0c\u5219\u7528\u6709\u503c\u7684\u7ed3\u70b9\u66ff\u6362\u8be5\u7ed3\u70b9\u5373\u53ef\u3002</p> 3.1.13.1.2 <p></p> <p></p>"},{"location":"tree/red_black_tree/#4-null","title":"4. \u524d\u9a71\u4e3a\u9ed1\u8272\u7ed3\u70b9\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u975e <code>null</code> \u5b50\u7ed3\u70b9","text":"<p>\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\u6709\u4e00\u4e2a\u6709\u503c\uff0c\u5219\u7528\u6709\u503c\u7684\u7ed3\u70b9\u66ff\u6362\u8be5\u7ed3\u70b9\u5373\u53ef\u3002</p> <ol> <li>\u627e\u5230\u524d\u9a71\u7ed3\u70b9</li> <li>\u7528\u524d\u9a71\u7ed3\u70b9\u7684\u503c\u66ff\u6362\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u503c</li> <li>\u5220\u9664\u524d\u9a71\u7ed3\u70b9</li> <li>\u53d8\u8272</li> </ol> 4.1.1 \u627e\u5230\u524d\u9a714.1.2 \u7528\u524d\u9a71\u8d4b\u503c4.1.3 \u5220\u9664\u524d\u9a714.1.4 \u53d8\u8272 <p></p> <p></p> <p></p> <p></p>"},{"location":"tree/red_black_tree/#5-null","title":"5. \u524d\u9a71\u4e3a\u9ed1\u8272\u8282\u70b9\uff0c\u540c\u65f6\u5b50\u8282\u70b9\u90fd\u4e3a <code>null</code>","text":"<p>\u524d\u9a71\u4e3a\u9ed1\u8272\u8282\u70b9\uff0c\u540c\u65f6\u5b50\u8282\u70b9\u90fd\u4e3a <code>null</code></p> <ol> <li>\u627e\u5230\u524d\u9a71\u7ed3\u70b9</li> <li>\u7528\u524d\u9a71\u7ed3\u70b9\u7684\u503c\u66ff\u6362\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u503c</li> <li>\u5220\u9664\u524d\u9a71\u7ed3\u70b9</li> <li>\u53d8\u8272</li> </ol> 5.1.1 \u627e\u5230\u524d\u9a715.1.2 \u7528\u524d\u9a71\u8d4b\u503c5.1.3 \u5220\u9664\u524d\u9a715.1.4 \u53d8\u8272 <p></p> <p></p> <p></p> <p></p>"},{"location":"tree/red_black_tree/#6-null","title":"6. \u524d\u9a71\u4e3a\u7ea2\u8272\u7ed3\u70b9\uff0c\u540c\u65f6\u5b50\u7ed3\u70b9\u90fd\u4e3a<code>null</code>","text":"<p>\u524d\u9a71\u4e3a\u7ea2\u8272\u7ed3\u70b9\uff0c\u540c\u65f6\u5b50\u7ed3\u70b9\u90fd\u4e3a<code>null</code></p> <ol> <li>\u627e\u5230\u524d\u9a71\u7ed3\u70b9</li> <li>\u7528\u524d\u9a71\u7ed3\u70b9\u7684\u503c\u66ff\u6362\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u503c</li> <li>\u5220\u9664\u524d\u9a71\u7ed3\u70b9</li> </ol> 6.1.1 \u627e\u5230\u524d\u9a716.1.2 \u7528\u524d\u9a71\u8d4b\u503c6.1.3 \u5220\u9664\u524d\u9a71 <p></p> <p></p> <p></p> <p>\u8865\u5145</p> <p>\u540e\u7ee7\u7684\u60c5\u51b5\u4e0e\u524d\u9a71\u7c7b\u4f3c</p> <ol> <li>\u627e\u5230\u540e\u7ee7\u7ed3\u70b9</li> <li>\u7528\u540e\u7ee7\u7ed3\u70b9\u7684\u503c\u66ff\u6362\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u503c</li> <li>\u5220\u9664\u540e\u7ee7\u7ed3\u70b9</li> <li>\u53d8\u8272</li> </ol>"},{"location":"tree/red_black_tree/#_9","title":"\u4ee3\u7801\u5b9e\u73b0","text":"\u524d\u7f6e\u5de6\u65cb\u53f3\u65cb\u63d2\u5165\u7b97\u6cd5\u5220\u9664\u7b97\u6cd5 <pre><code>private static final boolean RED = true;\nprivate static final boolean BLACK = false;\n\nprivate class Node {\nKey key;//\u952e\nValue val;//\u76f8\u5173\u8054\u7684\u503c\nNode left, right;//\u5de6\u53f3\u5b50\u6811\nint N;//\u8fd9\u68f5\u6811\u4e2d\u7684\u7ed3\u70b9\u603b\u6570\nboolean color;//\u7531\u5176\u7236\u7ed3\u70b9\u6307\u5411\u5b83\u7684\u94fe\u63a5\u7684\u989c\u8272\n\nNode(Key key, Value val, int N, boolean color){\nthis.key = key;\nthis.val = val;\nthis.N = N;\nthis.color = color;\n}\n}\n\nprivate boolean isRed(Node x){\nif(x==null)return false;\nreturn x.color == RED;\n}\n</code></pre> <pre><code>Node rotateLeft(Node h){\nNode x = h.right;\nh.right = x.left;\nx.left = h;\nx.color = h.color;\nh.color = RED;\nx.N = h.N;\nh.N = 1 + size(h.left) + size(h.right);\nreturn x;\n}\n</code></pre> <pre><code>Node rotateRight(Node h){\nNode x = h.left;\nh.left = x.right;\nx.right = h;\nx.color = h.color;\nh.color = RED;\nx.N = h.N;\nh.N = 1 + size(h.left) + size(h.right);\nreturn x;\n}\n</code></pre> <pre><code>public void put(Key key, Value val) {\nif (key == null) throw new IllegalArgumentException(\"first argument to put() is null\");\nif (val == null) {\ndelete(key);\nreturn;\n}\n\nroot = put(root, key, val);\nroot.color = BLACK;\n}\n\n// insert the key-value pair in the subtree rooted at h\nprivate Node put(Node h, Key key, Value val) {\nif (h == null) return new Node(key, val, RED, 1);\n\nint cmp = key.compareTo(h.key);\nif      (cmp &lt; 0) h.left  = put(h.left,  key, val);\nelse if (cmp &gt; 0) h.right = put(h.right, key, val);\nelse              h.val   = val;\n\n// fix-up any right-leaning links\nif (isRed(h.right) &amp;&amp; !isRed(h.left))      h = rotateLeft(h);\nif (isRed(h.left)  &amp;&amp;  isRed(h.left.left)) h = rotateRight(h);\nif (isRed(h.left)  &amp;&amp;  isRed(h.right))     flipColors(h);\nh.size = size(h.left) + size(h.right) + 1;\n\nreturn h;\n}\n</code></pre> <pre><code>public void delete(Key key) {\nif (key == null) throw new IllegalArgumentException(\"argument to delete() is null\");\nif (!contains(key)) return;\n\n// if both children of root are black, set root to red\nif (!isRed(root.left) &amp;&amp; !isRed(root.right))\nroot.color = RED;\n\nroot = delete(root, key);\nif (!isEmpty()) root.color = BLACK;\n}\n\n// delete the key-value pair with the given key rooted at h\nprivate Node delete(Node h, Key key) {\n\nif (key.compareTo(h.key) &lt; 0)  {\nif (!isRed(h.left) &amp;&amp; !isRed(h.left.left))\nh = moveRedLeft(h);\nh.left = delete(h.left, key);\n}\nelse {\nif (isRed(h.left))\nh = rotateRight(h);\nif (key.compareTo(h.key) == 0 &amp;&amp; (h.right == null))\nreturn null;\nif (!isRed(h.right) &amp;&amp; !isRed(h.right.left))\nh = moveRedRight(h);\nif (key.compareTo(h.key) == 0) {\nNode x = min(h.right);\nh.key = x.key;\nh.val = x.val;\n// h.val = get(h.right, min(h.right).key);\n// h.key = min(h.right).key;\nh.right = deleteMin(h.right);\n}\nelse h.right = delete(h.right, key);\n}\nreturn balance(h);\n}\n</code></pre>"}]}